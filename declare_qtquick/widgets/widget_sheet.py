"""
- This module is auto generated by `declare-qtquick/blueprint/src
  /template_generator/create_widget_sheet.py`.
- Please do not edit this file directly.
- (For developer) this module shouldn't be imported by `declare_qtquick
  .properties.prop_sheet.__init__`, although it is in the same folder.
  Otherwise it will cause a circular import error.
- The prefix 'Ps' means 'declare_qtquick.properties.prop_sheet
  .PropSheet'.
- The prefix 'P' means 'declare_qtquick.properties'.
"""
from typing import Union

from .__ext__ import properties as P  # noqa


class PsQtObject(P.PropSheet):
    object_name: Union[str, P.String]


class PsItem(PsQtObject):
    active_focus: Union[bool, P.Bool]
    active_focus_on_tab: Union[bool, P.Bool]
    anchors: P.Anchors
    antialiasing: Union[bool, P.Bool]
    baseline_offset: Union[int, P.Int]
    children: Union[list, P.List]
    children_rect: P.ChildrenRect
    clip: Union[bool, P.Bool]
    containment_mask: P.Property
    data: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    focus: Union[bool, P.Bool]
    height: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    opacity: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    resources: Union[list, P.List]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transform: Union[list, P.List]
    transform_origin: Union[int, P.Enumeration]
    transitions: Union[list, P.List]
    visible: Union[bool, P.Bool]
    visible_children: Union[list, P.List]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]


class PsNode(P.PropSheet):
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsControl(PsItem):
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    content_item: P.Property
    focus_policy: Union[int, P.Enumeration]
    focus_reason: Union[int, P.Enumeration]
    font: P.Font
    horizontal_padding: Union[float, P.Real]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    mirrored: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    right_inset: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    vertical_padding: Union[float, P.Real]
    visual_focus: Union[bool, P.Bool]
    wheel_enabled: Union[bool, P.Bool]


class PsAnimation(P.PropSheet):
    always_run_to_end: Union[bool, P.Bool]
    loops: Union[int, P.Int]
    paused: Union[bool, P.Bool]
    running: Union[bool, P.Bool]


class PsRenderState(PsNode):
    pass


class PsFrameGraphNode(PsNode):
    pass


class PsAbstractSeries(P.PropSheet):
    name_: Union[str, P.String]
    opacity: Union[float, P.Real]
    type: Union[int, P.Enumeration]
    use_open_gl: Union[bool, P.Bool]
    visible: Union[bool, P.Bool]


class PsAbstractButton(PsControl):
    action: P.Property
    auto_exclusive: Union[bool, P.Bool]
    auto_repeat: Union[bool, P.Bool]
    auto_repeat_delay: Union[int, P.Int]
    auto_repeat_interval: Union[int, P.Int]
    checkable: Union[bool, P.Bool]
    checked: Union[bool, P.Bool]
    display: Union[int, P.Enumeration]
    down: Union[bool, P.Bool]
    icon: P.Icon
    implicit_indicator_height: Union[float, P.Real]
    implicit_indicator_width: Union[float, P.Real]
    indicator: P.Property
    press_x: Union[float, P.Real]
    press_y: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    text: Union[str, P.String]


class PsBaseKey(PsItem):
    active: Union[bool, P.Bool]
    alternative_keys: P.Var
    display_text: Union[str, P.String]
    effective_alternative_keys: P.Var
    effective_alternative_keys_highlight_index: Union[int, P.Int]
    function_key: Union[bool, P.Bool]
    highlighted: Union[bool, P.Bool]
    key: Union[int, P.Int]
    key_panel_delegate: P.Property
    key_type: Union[int, P.Int]
    no_key_event: Union[bool, P.Bool]
    no_modifier: Union[bool, P.Bool]
    pressed: Union[bool, P.Bool]
    repeat: Union[bool, P.Bool]
    show_preview: Union[bool, P.Bool]
    small_text: Union[str, P.String]
    small_text_visible: Union[bool, P.Bool]
    sound_effect: Union[str, P.Url]
    text: Union[str, P.String]
    uppercased: Union[bool, P.Bool]
    weight: Union[float, P.Real]


class PsMaterial(P.PropSheet):
    effect: P.Property
    parameters: Union[list, P.List]
    cull_mode: Union[int, P.Enumeration]
    light_probe: P.Property
    lightmap_indirect: P.Property
    lightmap_radiosity: P.Property
    lightmap_shadow: P.Property
    children: Union[list, P.List]
    data: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsComponent3D(PsNode):
    is_shareable: Union[bool, P.Bool]


class PsObject3D(PsQtObject):
    children: Union[list, P.List]
    data: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]


class PsPointerHandler(P.PropSheet):
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    parent: P.Property
    target: P.Property


class PsPointerDeviceHandler(PsPointerHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    parent: P.Property
    target: P.Property


class PsPropertyAnimation(PsAnimation):
    duration: Union[int, P.Int]
    easing: P.Easing
    exclude: Union[list, P.List]
    from_: P.Property
    properties_: Union[str, P.String]
    property: Union[str, P.String]
    target: P.Property
    targets: Union[list, P.List]
    to: P.Property


class PsAffector(P.PropSheet):
    acceleration: P.Property
    enabled: Union[bool, P.Bool]
    groups: Union[list, P.List]
    once: Union[bool, P.Bool]
    position: P.Property
    relative: Union[bool, P.Bool]
    shape: P.Property
    system: P.Property
    velocity: P.Property
    when_colliding_with: Union[list, P.List]


class PsKey(PsBaseKey):
    pass


class PsAbstractBarSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    bar_width: Union[float, P.Real]
    count: Union[int, P.Int]
    labels_angle: Union[float, P.Real]
    labels_format: Union[str, P.String]
    labels_position: Union[int, P.Enumeration]
    labels_precision: Union[float, P.Real]
    labels_visible: Union[bool, P.Bool]


class PsAnimator(PsAnimation):
    duration: Union[int, P.Int]
    easing: P.Easing
    from_: Union[float, P.Real]
    target: P.Property
    to: Union[float, P.Real]


class PsAbstractAxis(P.PropSheet):
    alignment: P.Property
    color: Union[str, P.Color]
    grid_line_color: Union[str, P.Color]
    grid_visible: Union[bool, P.Bool]
    labels_angle: Union[int, P.Int]
    labels_color: Union[str, P.Color]
    labels_font: P.Font
    labels_visible: Union[bool, P.Bool]
    line_visible: Union[bool, P.Bool]
    minor_grid_line_color: Union[str, P.Color]
    minor_grid_visible: Union[bool, P.Bool]
    orientation: P.Property
    reverse: P.Property
    shades_border_color: Union[str, P.Color]
    shades_color: Union[str, P.Color]
    shades_visible: Union[bool, P.Bool]
    title_font: P.Font
    title_text: Union[str, P.String]
    title_visible: Union[bool, P.Bool]
    visible: Union[bool, P.Bool]


class PsDialog(P.PropSheet):
    footer: P.Property
    header: P.Property
    implicit_footer_height: Union[float, P.Real]
    implicit_footer_width: Union[float, P.Real]
    implicit_header_height: Union[float, P.Real]
    implicit_header_width: Union[float, P.Real]
    result: Union[int, P.Int]
    standard_buttons: Union[int, P.Enumeration]
    title: Union[str, P.String]
    active_focus: Union[bool, P.Bool]
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_margin: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    clip: Union[bool, P.Bool]
    close_policy: Union[int, P.Enumeration]
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]
    content_height: Union[float, P.Real]
    content_item: P.Property
    content_width: Union[float, P.Real]
    dim: Union[bool, P.Bool]
    enabled: Union[bool, P.Bool]
    enter: P.Property
    exit: P.Property
    focus: Union[bool, P.Bool]
    font: P.Font
    height: Union[float, P.Real]
    horizontal_padding: Union[float, P.Real]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_margin: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    margins: Union[float, P.Real]
    mirrored: Union[bool, P.Bool]
    modal: Union[bool, P.Bool]
    opacity: Union[float, P.Real]
    opened: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    right_inset: Union[float, P.Real]
    right_margin: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    scale: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_margin: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    transform_origin: Union[int, P.Enumeration]
    vertical_padding: Union[float, P.Real]
    visible: Union[bool, P.Bool]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]
    data: Union[list, P.List]
    flags: P.Property
    modality: P.Property
    parent_window: P.Property


class PsPane(PsControl):
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]


class PsFlickable(PsItem):
    at_x_beginning: Union[bool, P.Bool]
    at_x_end: Union[bool, P.Bool]
    at_y_beginning: Union[bool, P.Bool]
    at_y_end: Union[bool, P.Bool]
    bottom_margin: Union[float, P.Real]
    bounds_behavior: Union[int, P.Enumeration]
    bounds_movement: Union[int, P.Enumeration]
    content_height: Union[float, P.Real]
    content_item: P.Property
    content_width: Union[float, P.Real]
    content_x: Union[float, P.Real]
    content_y: Union[float, P.Real]
    dragging: Union[bool, P.Bool]
    dragging_horizontally: Union[bool, P.Bool]
    dragging_vertically: Union[bool, P.Bool]
    flick_deceleration: Union[float, P.Real]
    flickable_direction: Union[int, P.Enumeration]
    flicking: Union[bool, P.Bool]
    flicking_horizontally: Union[bool, P.Bool]
    flicking_vertically: Union[bool, P.Bool]
    horizontal_overshoot: Union[float, P.Real]
    horizontal_velocity: Union[float, P.Real]
    interactive: Union[bool, P.Bool]
    left_margin: Union[float, P.Real]
    maximum_flick_velocity: Union[float, P.Real]
    moving: Union[bool, P.Bool]
    moving_horizontally: Union[bool, P.Bool]
    moving_vertically: Union[bool, P.Bool]
    origin_x: Union[float, P.Real]
    origin_y: Union[float, P.Real]
    pixel_aligned: Union[bool, P.Bool]
    press_delay: Union[int, P.Int]
    rebound: P.Property
    right_margin: Union[float, P.Real]
    synchronous_drag: Union[bool, P.Bool]
    top_margin: Union[float, P.Real]
    vertical_overshoot: Union[float, P.Real]
    vertical_velocity: Union[float, P.Real]
    visible_area: P.VisibleArea


class PsCamera(P.PropSheet):
    aspect_ratio: Union[float, P.Real]
    bottom: Union[float, P.Real]
    exposure: Union[float, P.Real]
    far_plane: Union[float, P.Real]
    field_of_view: Union[float, P.Real]
    left: Union[float, P.Real]
    near_plane: Union[float, P.Real]
    position: P.Vector3D
    projection_matrix: P.Matrix4x4
    projection_type: Union[int, P.Enumeration]
    right: P.Vector3D
    top: Union[float, P.Real]
    up_vector: P.Vector3D
    view_center: P.Vector3D
    view_vector: P.Vector3D
    components: Union[list, P.List]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]
    frustum_culling_enabled: Union[bool, P.Bool]


class PsEntity(PsNode):
    components: Union[list, P.List]


class PsContainer(PsControl):
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]
    content_height: Union[float, P.Real]
    content_model: P.Property
    content_width: Union[float, P.Real]
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property


class PsItemDelegate(PsAbstractButton):
    highlighted: Union[bool, P.Bool]


class PsGradient(P.PropSheet):
    orientation: Union[int, P.Enumeration]
    stops: Union[list, P.List]


class PsSinglePointHandler(PsPointerDeviceHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    parent: P.Property
    point: P.Property
    target: P.Property


class PsDirection(P.PropSheet):
    pass


class PsAffector3D(PsNode):
    enabled: Union[bool, P.Bool]
    particles: Union[list, P.List]
    system: P.Property


class PsAbstractAnimation(P.PropSheet):
    animation_name: Union[str, P.String]
    animation_type: Union[int, P.Enumeration]
    duration: Union[float, P.Real]
    position: Union[float, P.Real]


class PsXYSeries(PsAbstractSeries):
    axis_angular: P.Property
    axis_radial: P.Property
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    color: Union[str, P.Color]
    point_labels_clipping: Union[bool, P.Bool]
    point_labels_color: P.Font
    point_labels_font: P.Font
    point_labels_format: Union[str, P.String]
    point_labels_visible: Union[bool, P.Bool]
    points_visible: Union[bool, P.Bool]


class PsNumberAnimation(PsPropertyAnimation):
    from_: Union[float, P.Real]
    to: Union[float, P.Real]


class PsShape(PsItem):
    asynchronous: Union[bool, P.Bool]
    contains_mode: Union[int, P.Enumeration]
    data: Union[list, P.List]
    renderer_type: Union[int, P.Enumeration]
    status: Union[int, P.Enumeration]
    vendor_extensions_enabled: Union[bool, P.Bool]


class PsShapeGradient(PsGradient):
    spread: Union[int, P.Enumeration]


class PsAbstractClipAnimator(P.PropSheet):
    channel_mapper: P.Property
    clock: P.Property
    loops: Union[int, P.Int]
    normalized_time: Union[float, P.Real]
    running: Union[bool, P.Bool]


class PsButton(PsAbstractButton):
    flat: Union[bool, P.Bool]
    highlighted: Union[bool, P.Bool]


class PsPopup(PsQtObject):
    active_focus: Union[bool, P.Bool]
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_margin: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    clip: Union[bool, P.Bool]
    close_policy: Union[int, P.Enumeration]
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]
    content_height: Union[float, P.Real]
    content_item: P.Property
    content_width: Union[float, P.Real]
    dim: Union[bool, P.Bool]
    enabled: Union[bool, P.Bool]
    enter: P.Property
    exit: P.Property
    focus: Union[bool, P.Bool]
    font: P.Font
    height: Union[float, P.Real]
    horizontal_padding: Union[float, P.Real]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_margin: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    margins: Union[float, P.Real]
    mirrored: Union[bool, P.Bool]
    modal: Union[bool, P.Bool]
    opacity: Union[float, P.Real]
    opened: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    right_inset: Union[float, P.Real]
    right_margin: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    scale: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_margin: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    transform_origin: Union[int, P.Enumeration]
    vertical_padding: Union[float, P.Real]
    visible: Union[bool, P.Bool]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]


class PsMultiPointHandler(PsPointerDeviceHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    centroid: P.Property
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    maximum_point_count: Union[int, P.Int]
    minimum_point_count: Union[int, P.Int]
    parent: P.Property
    target: P.Property


class PsTableView(PsFlickable):
    bottom_row: Union[int, P.Int]
    column_spacing: Union[float, P.Real]
    column_width_provider: P.Var
    columns: Union[int, P.Int]
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    delegate: P.Property
    left_column: Union[int, P.Int]
    model: P.Property
    reuse_items: Union[bool, P.Bool]
    right_column: Union[int, P.Int]
    row_height_provider: P.Var
    row_spacing: Union[float, P.Real]
    rows: Union[int, P.Int]
    sync_direction: P.Property
    sync_view: P.Property
    top_row: Union[int, P.Int]


class PsParticlePainter(PsItem):
    groups: Union[list, P.List]
    system: P.Property


class PsColumnLayout(PsItem):
    layout_direction: Union[int, P.Enumeration]
    spacing: Union[float, P.Real]


class PsDirection3D(PsQtObject):
    pass


class PsParticle3D(PsObject3D):
    align_mode: Union[int, P.Enumeration]
    fade_type: Union[int, P.Enumeration]
    align_mode: P.Property
    align_target_position: P.Vector3D
    color: Union[str, P.Color]
    color_variation: P.Vector4D
    fade_in_duration: Union[int, P.Int]
    fade_in_effect: P.Property
    fade_out_duration: Union[int, P.Int]
    fade_out_effect: P.Property
    max_amount: Union[int, P.Int]
    system: P.Property
    unified_color_variation: Union[bool, P.Bool]


class PsCommand(P.PropSheet):
    pass


class PsInstancing(PsObject3D):
    has_transparency: Union[bool, P.Bool]
    instance_count_override: Union[int, P.Int]


class PsAbstractTextureImage(PsNode):
    face: Union[int, P.Enumeration]
    layer: Union[int, P.Int]
    mip_level: Union[int, P.Int]


class PsAbstractSkeleton(PsNode):
    pass


class PsBoundingVolume(P.PropSheet):
    implicit_max_point: P.Vector3D
    implicit_min_point: P.Vector3D
    implicit_points_valid: Union[bool, P.Bool]
    max_point: P.Vector3D
    min_point: P.Vector3D
    view: P.Property


class PsGeometry(P.PropSheet):
    attributes: Union[list, P.List]
    bounding_volume_position_attribute: P.Property
    max_extent: P.Vector3D
    min_extent: P.Vector3D
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsChartView(P.PropSheet):
    animation_duration: Union[int, P.Int]
    animation_easing_curve: P.Easing
    animation_options: Union[int, P.Enumeration]
    axes: Union[list, P.List]
    background_color: Union[str, P.Color]
    background_roundness: Union[float, P.Real]
    count: Union[int, P.Int]
    drop_shadow_enabled: Union[bool, P.Bool]
    legend: P.Property
    locale: P.Property
    localize_numbers: Union[bool, P.Bool]
    margins: P.Property
    plot_area: P.Rect
    plot_area_color: Union[str, P.Color]
    theme: Union[int, P.Enumeration]
    title: Union[str, P.String]
    title_color: Union[str, P.Color]
    title_font: P.Font


class PsFrame(PsPane):
    pass


class PsCanvas(PsItem):
    available: Union[bool, P.Bool]
    canvas_size: P.Size
    context: P.Property
    context_type: Union[str, P.String]
    render_strategy: Union[int, P.Enumeration]
    render_target: Union[int, P.Enumeration]


class PsImage(PsItem):
    asynchronous: Union[bool, P.Bool]
    auto_transform: Union[bool, P.Bool]
    cache: Union[bool, P.Bool]
    current_frame: Union[int, P.Int]
    fill_mode: Union[int, P.Enumeration]
    frame_count: Union[int, P.Int]
    horizontal_alignment: Union[int, P.Enumeration]
    mipmap: Union[bool, P.Bool]
    mirror: Union[bool, P.Bool]
    painted_height: Union[float, P.Real]
    painted_width: Union[float, P.Real]
    progress: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    source: Union[str, P.Url]
    source_clip_rect: P.Rect
    source_size: P.Size
    status: Union[int, P.Enumeration]
    vertical_alignment: Union[int, P.Enumeration]


class PsLoader(PsItem):
    active: Union[bool, P.Bool]
    asynchronous: Union[bool, P.Bool]
    item: P.Property
    progress: Union[float, P.Real]
    source: Union[str, P.Url]
    source_component: P.Property
    status: Union[int, P.Enumeration]


class PsMultiPointTouchArea(PsItem):
    maximum_touch_points: Union[int, P.Int]
    minimum_touch_points: Union[int, P.Int]
    mouse_enabled: Union[bool, P.Bool]
    touch_points: Union[list, P.List]


class PsPath(P.PropSheet):
    closed: Union[bool, P.Bool]
    path_elements: Union[list, P.List]
    scale: P.Size
    start_x: Union[float, P.Real]
    start_y: Union[float, P.Real]


class PsRectangle(PsItem):
    antialiasing: Union[bool, P.Bool]
    border: P.Border
    color: Union[str, P.Color]
    gradient: P.Property
    radius: Union[float, P.Real]


class PsText(PsItem):
    advance: P.Size
    antialiasing: Union[bool, P.Bool]
    base_url: Union[str, P.Url]
    bottom_padding: Union[float, P.Real]
    clip: Union[bool, P.Bool]
    color: Union[str, P.Color]
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    effective_horizontal_alignment: Union[int, P.Enumeration]
    elide: Union[int, P.Enumeration]
    font_size_mode: Union[int, P.Enumeration]
    horizontal_alignment: Union[int, P.Enumeration]
    hovered_link: Union[str, P.String]
    left_padding: Union[float, P.Real]
    line_count: Union[int, P.Int]
    line_height: Union[float, P.Real]
    line_height_mode: Union[int, P.Enumeration]
    link_color: Union[str, P.Color]
    maximum_line_count: Union[int, P.Int]
    minimum_pixel_size: Union[int, P.Int]
    minimum_point_size: Union[int, P.Int]
    padding: Union[float, P.Real]
    render_type: Union[int, P.Enumeration]
    render_type_quality: Union[int, P.Int]
    right_padding: Union[float, P.Real]
    style: Union[int, P.Enumeration]
    style_color: Union[str, P.Color]
    text: Union[str, P.String]
    text_format: Union[int, P.Enumeration]
    top_padding: Union[float, P.Real]
    truncated: Union[bool, P.Bool]
    vertical_alignment: Union[int, P.Enumeration]
    wrap_mode: Union[int, P.Enumeration]


class PsTextEdit(PsItem):
    active_focus_on_press: Union[bool, P.Bool]
    base_url: Union[str, P.Url]
    bottom_padding: Union[float, P.Real]
    can_paste: Union[bool, P.Bool]
    can_redo: Union[bool, P.Bool]
    can_undo: Union[bool, P.Bool]
    color: Union[str, P.Color]
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    cursor_delegate: P.Property
    cursor_position: Union[int, P.Int]
    cursor_rectangle: P.Property
    cursor_visible: Union[bool, P.Bool]
    effective_horizontal_alignment: Union[int, P.Enumeration]
    horizontal_alignment: Union[int, P.Enumeration]
    hovered_link: Union[str, P.String]
    input_method_composing: Union[bool, P.Bool]
    input_method_hints: Union[int, P.Enumeration]
    left_padding: Union[float, P.Real]
    length: Union[int, P.Int]
    line_count: Union[int, P.Int]
    mouse_selection_mode: Union[int, P.Enumeration]
    overwrite_mode: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    persistent_selection: Union[bool, P.Bool]
    preedit_text: Union[str, P.String]
    read_only: Union[bool, P.Bool]
    render_type: Union[int, P.Enumeration]
    right_padding: Union[float, P.Real]
    select_by_keyboard: Union[bool, P.Bool]
    select_by_mouse: Union[bool, P.Bool]
    selected_text: Union[str, P.String]
    selected_text_color: Union[str, P.Color]
    selection_color: Union[str, P.Color]
    selection_end: Union[int, P.Int]
    selection_start: Union[int, P.Int]
    tab_stop_distance: Union[float, P.Real]
    text: Union[str, P.String]
    text_document: P.Property
    text_format: Union[int, P.Enumeration]
    text_margin: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    vertical_alignment: Union[int, P.Enumeration]
    wrap_mode: Union[int, P.Enumeration]


class PsTextInput(PsItem):
    acceptable_input: Union[bool, P.Bool]
    active_focus_on_press: Union[bool, P.Bool]
    auto_scroll: Union[bool, P.Bool]
    bottom_padding: Union[float, P.Real]
    can_paste: Union[bool, P.Bool]
    can_redo: Union[bool, P.Bool]
    can_undo: Union[bool, P.Bool]
    color: Union[str, P.Color]
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    cursor_delegate: P.Property
    cursor_position: Union[int, P.Int]
    cursor_rectangle: P.Property
    cursor_visible: Union[bool, P.Bool]
    display_text: Union[str, P.String]
    echo_mode: Union[int, P.Enumeration]
    effective_horizontal_alignment: Union[int, P.Enumeration]
    horizontal_alignment: Union[int, P.Enumeration]
    input_mask: Union[str, P.String]
    input_method_composing: Union[bool, P.Bool]
    input_method_hints: Union[int, P.Enumeration]
    left_padding: Union[float, P.Real]
    length: Union[int, P.Int]
    maximum_length: Union[int, P.Int]
    mouse_selection_mode: Union[int, P.Enumeration]
    overwrite_mode: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    password_character: Union[str, P.String]
    password_mask_delay: Union[int, P.Int]
    persistent_selection: Union[bool, P.Bool]
    preedit_text: Union[str, P.String]
    read_only: Union[bool, P.Bool]
    render_type: Union[int, P.Enumeration]
    right_padding: Union[float, P.Real]
    select_by_mouse: Union[bool, P.Bool]
    selected_text: Union[str, P.String]
    selected_text_color: Union[str, P.Color]
    selection_color: Union[str, P.Color]
    selection_end: Union[int, P.Int]
    selection_start: Union[int, P.Int]
    text: Union[str, P.String]
    top_padding: Union[float, P.Real]
    validator: P.Property
    vertical_alignment: Union[int, P.Enumeration]
    wrap_mode: Union[int, P.Enumeration]


class PsWindow(P.PropSheet):
    active: Union[bool, P.Bool]
    active_focus_item: P.Property
    color: Union[str, P.Color]
    content_item: P.Property
    content_orientation: P.Property
    data: Union[list, P.List]
    flags: P.Property
    height: Union[int, P.Int]
    maximum_height: Union[int, P.Int]
    maximum_width: Union[int, P.Int]
    minimum_height: Union[int, P.Int]
    minimum_width: Union[int, P.Int]
    modality: P.Property
    opacity: Union[float, P.Real]
    palette: P.Property
    screen: P.Property
    title: Union[str, P.String]
    transient_parent: P.Property
    visibility: P.Property
    visible: Union[bool, P.Bool]
    width: Union[int, P.Int]
    x: Union[int, P.Int]
    y: Union[int, P.Int]


class PsRowLayout(PsItem):
    layout_direction: Union[int, P.Enumeration]
    spacing: Union[float, P.Real]


class PsParticleEmitter3D(PsNode):
    depth_bias: Union[float, P.Real]
    emit_bursts: Union[list, P.List]
    emit_rate: Union[float, P.Real]
    enabled: Union[bool, P.Bool]
    life_span: Union[int, P.Int]
    life_span_variation: Union[int, P.Int]
    particle: P.Property
    particle_end_scale: Union[float, P.Real]
    particle_rotation: P.Vector3D
    particle_rotation_variation: P.Vector3D
    particle_rotation_velocity: P.Vector3D
    particle_rotation_velocity_variation: P.Vector3D
    particle_scale: Union[float, P.Real]
    particle_scale_variation: Union[float, P.Real]
    shape: P.Property
    system: P.Property
    velocity: P.Property


class PsPerspectiveCamera(PsCamera):
    field_of_view_orientation: Union[int, P.Enumeration]
    clip_far: Union[float, P.Real]
    clip_near: Union[float, P.Real]
    field_of_view: Union[float, P.Real]
    field_of_view_orientation: Union[int, P.Enumeration]


class PsComponent(P.PropSheet):
    progress: Union[float, P.Real]
    status: Union[int, P.Enumeration]
    url: Union[str, P.Url]


class PsWaylandQuickItem(P.PropSheet):
    buffer_locked: Union[bool, P.Bool]
    compositor: P.Property
    focus_on_click: Union[bool, P.Bool]
    origin: P.Property
    paint_enabled: Union[bool, P.Bool]
    subsurface_handler: P.Property
    surface: P.Property
    touch_events_enabled: Union[bool, P.Bool]


class PsAbstractActionInput(P.PropSheet):
    pass


class PsAbstractAxisInput(P.PropSheet):
    source_device: P.Property


class PsAbstractPhysicalDevice(P.PropSheet):
    pass


class PsAction(P.PropSheet):
    action: Union[bool, P.Bool]
    inputs: Union[list, P.List]
    checkable: Union[bool, P.Bool]
    checked: Union[bool, P.Bool]
    enabled: Union[bool, P.Bool]
    icon: P.Icon
    shortcut: P.Property
    text: Union[str, P.String]
    object_name: Union[str, P.String]


class PsActionInput(P.PropSheet):
    buttons: Union[list, P.List]
    source_device: P.Property


class PsAnalogAxisInput(P.PropSheet):
    axis: Union[int, P.Int]


class PsAxis(P.PropSheet):
    buttons: P.Property
    inputs: Union[list, P.List]
    scale: Union[float, P.Real]
    value: Union[int, P.Int]
    velocity: Union[float, P.Real]


class PsAxisAccumulator(P.PropSheet):
    source_axis: P.Axis
    source_axis_type: P.Property
    value: Union[float, P.Real]


class PsAxisSetting(P.PropSheet):
    axes: Union[list, P.List]
    axis: P.Property
    dead_zone_radius: Union[float, P.Number]
    smooth: Union[bool, P.Bool]


class PsButtonAxisInput(P.PropSheet):
    acceleration: Union[float, P.Real]
    buttons: Union[list, P.List]
    deceleration: Union[list, P.List]
    scale: Union[float, P.Real]


class PsInputChord(P.PropSheet):
    chords: Union[list, P.List]
    timeout: Union[int, P.Int]


class PsInputSequence(P.PropSheet):
    button_interval: Union[int, P.Int]
    sequences: Union[list, P.List]
    timeout: Union[int, P.Int]


class PsInputSettings(PsComponent3D):
    event_source: P.Property


class PsKeyboardDevice(PsNode):
    active_input: P.Property


class PsKeyboardHandler(PsComponent3D):
    focus: Union[bool, P.Bool]
    source_device: P.Property


class PsKeyEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    count: Union[int, P.Int]
    is_auto_repeat: Union[bool, P.Bool]
    key: Union[int, P.Int]
    modifiers: Union[int, P.Int]
    native_scan_code: P.Property
    text: Union[str, P.String]


class PsLogicalDevice(P.PropSheet):
    actions: Union[list, P.List]
    axis: Union[list, P.List]


class PsMouseDevice(P.PropSheet):
    sensitivity: Union[float, P.Real]
    update_axes_continuously: Union[bool, P.Bool]


class PsMouseEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    button: Union[int, P.Enumeration]
    buttons: Union[int, P.Int]
    flags: Union[int, P.Int]
    modifiers: Union[int, P.Int]
    source: Union[int, P.Int]
    was_held: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsMouseHandler(P.PropSheet):
    contains_mouse: Union[bool, P.Bool]
    source_device: P.Property


class PsWheelEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    angle_delta: P.Point
    buttons: Union[int, P.Int]
    inverted: Union[bool, P.Bool]
    modifiers: Union[int, P.Int]
    pixel_delta: P.Point
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsAbstractClipBlendNode(P.PropSheet):
    pass


class PsAdditiveClipBlend(P.PropSheet):
    additive_clip: P.Property
    additive_factor: Union[float, P.Real]
    base_clip: P.Property


class PsAnimationController(P.PropSheet):
    animation: P.Property
    progress: Union[float, P.Real]


class PsAnimationGroup(P.PropSheet):
    animations: Union[list, P.List]
    duration: Union[float, P.Real]
    name_: Union[str, P.String]
    position: Union[float, P.Real]


class PsBlendedClipAnimator(PsAbstractClipAnimator):
    blend_tree: P.Property


class PsClipAnimator(PsAbstractClipAnimator):
    clip: P.Var


class PsClipBlendValue(P.PropSheet):
    clip: P.Property


class PsKeyframeAnimation(PsAbstractAnimation):
    easing: P.Property
    end_mode: Union[int, P.Enumeration]
    frame_positions: Union[list, P.List]
    keyframes: Union[list, P.List]
    start_mode: Union[int, P.Enumeration]
    target: P.Property
    target_name: Union[str, P.String]


class PsLerpClipBlend(P.PropSheet):
    blend_factor: Union[float, P.Real]
    end_clip: P.Property
    start_clip: P.Property


class PsMorphingAnimation(PsAbstractAnimation):
    easing: P.Property
    interpolator: Union[float, P.Real]
    method: Union[int, P.Enumeration]
    morph_targets: Union[list, P.List]
    target: P.Property
    target_name: Union[str, P.String]
    target_positions: Union[list, P.List]


class PsMorphTarget(P.PropSheet):
    attribute_names: Union[list, P.List]
    attributes: Union[int, P.Enumeration]
    object_name: Union[str, P.String]
    weight: Union[float, P.Number]


class PsVertexBlendAnimation(PsAbstractAnimation):
    interpolator: Union[float, P.Real]
    morph_targets: Union[list, P.List]
    target: P.Property
    target_name: Union[str, P.String]
    target_positions: Union[list, P.List]


class PsAbstractRayCaster(P.PropSheet):
    filter_mode: Union[int, P.Enumeration]
    hits: P.Property
    run_mode: Union[int, P.Enumeration]


class PsAbstractTexture(P.PropSheet):
    handle: P.Var
    handle_type: Union[int, P.Enumeration]


class PsAlphaCoverage(PsRenderState):
    pass


class PsAlphaTest(PsRenderState):
    alpha_function: Union[int, P.Enumeration]
    reference_value: Union[float, P.Real]


class PsBlendEquation(PsRenderState):
    blend_function: Union[int, P.Enumeration]


class PsBlendEquationArguments(PsRenderState):
    destination_alpha: Union[int, P.Enumeration]
    buffer_index: Union[int, P.Int]
    destination_rgb: Union[int, P.Enumeration]
    source_alpha: Union[int, P.Enumeration]
    source_rgb: Union[int, P.Enumeration]


class PsBlitFramebuffer(PsFrameGraphNode):
    destination: P.Property
    destination_attachment_point: P.Property
    destination_rect: P.Rect
    interpolation_method: P.Property
    source: P.Property
    source_attachment_point: P.Property
    source_rect: P.Rect


class PsBufferCapture(P.PropSheet):
    pass


class PsCameraLens(PsComponent3D):
    aspect_ratio: Union[float, P.Real]
    bottom: Union[float, P.Real]
    far_plane: Union[float, P.Real]
    field_of_view: Union[float, P.Real]
    left: Union[float, P.Real]
    near_plane: Union[float, P.Real]
    projection_matrix: P.Matrix4x4
    projection_type: Union[int, P.Enumeration]
    right: Union[float, P.Real]
    top: Union[float, P.Real]


class PsCameraSelector(PsFrameGraphNode):
    camera: P.Property


class PsClearBuffers(PsFrameGraphNode):
    buffers: Union[int, P.Enumeration]
    clear_color: Union[str, P.Color]
    clear_depth_value: Union[float, P.Real]
    clear_stencil_value: Union[int, P.Int]
    color_buffer: P.Property


class PsClipPlane(PsRenderState):
    distance: Union[float, P.Real]
    normal: P.Vector3D
    plane_index: Union[int, P.Int]


class PsColorMask(PsRenderState):
    alpha_masked: Union[bool, P.Bool]
    blue_masked: Union[bool, P.Bool]
    green_masked: Union[bool, P.Bool]
    red_masked: Union[bool, P.Bool]


class PsComputeCommand(PsComponent3D):
    run_type: Union[int, P.Enumeration]
    work_group_x: Union[int, P.Int]
    work_group_y: Union[int, P.Int]
    work_group_z: Union[int, P.Int]


class PsCullFace(PsRenderState):
    mode: Union[int, P.Enumeration]


class PsDebugOverlay(PsFrameGraphNode):
    pass


class PsDepthRange(PsRenderState):
    pass


class PsDepthTest(PsRenderState):
    depth_function: Union[int, P.Enumeration]


class PsDirectionalLight(P.PropSheet):
    world_direction: P.Vector3D
    type: Union[int, P.Enumeration]
    ambient_color: Union[str, P.Color]
    brightness: Union[float, P.Real]
    casts_shadow: Union[bool, P.Bool]
    color: Union[str, P.Color]
    scope: P.Property
    shadow_bias: Union[float, P.Real]
    shadow_factor: Union[float, P.Real]
    shadow_filter: Union[float, P.Real]
    shadow_map_far: Union[float, P.Real]
    shadow_map_quality: Union[int, P.Enumeration]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsDispatchCompute(PsFrameGraphNode):
    work_group_x: Union[int, P.Int]
    work_group_y: Union[int, P.Int]
    work_group_z: Union[int, P.Int]


class PsDithering(PsRenderState):
    pass


class PsEffect(P.PropSheet):
    parameters: Union[list, P.List]
    techniques: Union[list, P.List]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]
    passes: Union[list, P.List]


class PsEnvironmentLight(P.PropSheet):
    irradiance: P.Property
    specular: P.Property


class PsFilterKey(PsNode):
    name_: Union[str, P.String]
    value: P.Property


class PsFrontFace(PsRenderState):
    direction: Union[int, P.Enumeration]


class PsFrustumCulling(PsFrameGraphNode):
    pass


class PsGeometryRenderer(PsBoundingVolume):
    first_instance: Union[int, P.Int]
    first_vertex: Union[int, P.Int]
    geometry: P.Property
    index_buffer_byte_offset: Union[int, P.Int]
    index_offset: Union[int, P.Int]
    instance_count: Union[int, P.Int]
    primitive_restart_enabled: Union[bool, P.Bool]
    primitive_type: Union[int, P.Enumeration]
    restart_index_value: Union[int, P.Int]
    sort_index: Union[float, P.Number]
    vertex_count: Union[int, P.Int]
    vertices_per_patch: Union[int, P.Int]


class PsGraphicsApiFilter(PsQtObject):
    api: Union[int, P.Enumeration]
    extensions: P.Property
    major_version: Union[int, P.Int]
    minor_version: Union[int, P.Int]
    profile: Union[int, P.Enumeration]
    vendor: Union[str, P.String]


class PsLayer(PsComponent3D):
    recursive: Union[bool, P.Bool]


class PsLayerFilter(PsFrameGraphNode):
    filter_mode: Union[int, P.Enumeration]
    layers: Union[list, P.List]


class PsLevelOfDetail(PsComponent3D):
    threshold_type: Union[int, P.Enumeration]
    camera: P.Property
    current_index: Union[int, P.Int]
    threshold_type: Union[int, P.Int]
    thresholds: P.Property
    volume_override: Union[int, P.Int]


class PsLevelOfDetailBoundingSphere(PsComponent3D):
    center: P.Property
    radius: P.Property


class PsLevelOfDetailLoader(PsEntity):
    sources: Union[list, P.List]


class PsLevelOfDetailSwitch(PsComponent3D):
    current_index: Union[int, P.Int]


class PsLight(P.PropSheet):
    type: Union[int, P.Enumeration]
    ambient_color: Union[str, P.Color]
    brightness: Union[float, P.Real]
    casts_shadow: Union[bool, P.Bool]
    color: Union[str, P.Color]
    scope: P.Property
    shadow_bias: Union[float, P.Real]
    shadow_factor: Union[float, P.Real]
    shadow_filter: Union[float, P.Real]
    shadow_map_far: Union[float, P.Real]
    shadow_map_quality: Union[int, P.Enumeration]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsLineWidth(PsRenderState):
    value: Union[float, P.Real]


class PsMemoryBarrier(PsFrameGraphNode):
    pass


class PsMesh(P.PropSheet):
    mesh_name: Union[str, P.String]
    source: Union[str, P.Url]
    status: Union[int, P.Enumeration]


class PsMultiSampleAntiAliasing(PsRenderState):
    pass


class PsNoDepthMask(PsRenderState):
    pass


class PsNoDraw(PsFrameGraphNode):
    pass


class PsNoPicking(PsFrameGraphNode):
    pass


class PsObjectPicker(P.PropSheet):
    contains_mouse: Union[bool, P.Bool]
    drag_enabled: Union[bool, P.Bool]
    hover_enabled: Union[bool, P.Bool]
    pressed: Union[bool, P.Bool]
    priority: Union[int, P.Int]


class PsParameter(P.PropSheet):
    name_: P.Property
    value: P.Property


class PsPickEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    button: Union[int, P.Int]
    buttons: Union[int, P.Int]
    distance: Union[float, P.Real]
    entity: P.Property
    local_intersection: P.Vector3D
    modifiers: Union[int, P.Int]
    position: P.Property
    viewport: P.Property
    world_intersection: P.Vector3D


class PsPickingProxy(PsComponent3D):
    pass


class PsPickingSettings(P.PropSheet):
    face_orientation_picking_mode: Union[int, P.Enumeration]
    pick_method: Union[int, P.Enumeration]
    pick_result_mode: Union[int, P.Enumeration]
    world_space_tolerance: P.Property


class PsPickLineEvent(P.PropSheet):
    triangle_index: P.Property
    vertex1index: P.Property
    vertex2index: P.Property


class PsPickPointEvent(P.PropSheet):
    point_index: P.Property


class PsPickTriangleEvent(P.PropSheet):
    triangle_index: P.Property
    vertex1index: P.Property
    vertex2index: P.Property
    vertex3index: P.Property


class PsPointLight(P.PropSheet):
    constant_attenuation: Union[float, P.Number]
    linear_attenuation: Union[float, P.Number]
    quadratic_attenuation: Union[float, P.Number]
    constant_fade: Union[float, P.Real]
    linear_fade: Union[float, P.Real]
    quadratic_fade: Union[float, P.Real]
    type: Union[int, P.Enumeration]
    ambient_color: Union[str, P.Color]
    brightness: Union[float, P.Real]
    casts_shadow: Union[bool, P.Bool]
    color: Union[str, P.Color]
    scope: P.Property
    shadow_bias: Union[float, P.Real]
    shadow_factor: Union[float, P.Real]
    shadow_filter: Union[float, P.Real]
    shadow_map_far: Union[float, P.Real]
    shadow_map_quality: Union[int, P.Enumeration]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsPointSize(PsRenderState):
    size_mode: Union[int, P.Enumeration]
    value: Union[float, P.Real]


class PsPolygonOffset(PsRenderState):
    depth_steps: Union[float, P.Real]
    scale_factor: Union[float, P.Real]


class PsProximityFilter(PsFrameGraphNode):
    distance_threshold: Union[float, P.Real]
    entity: P.Property


class PsRasterMode(PsRenderState):
    face_mode: Union[int, P.Enumeration]
    raster_mode: Union[int, P.Enumeration]


class PsRayCaster(P.PropSheet):
    direction: P.Vector3D
    length: Union[float, P.Real]
    origin: P.Vector3D


class PsRenderCapabilities(P.PropSheet):
    api: P.Property
    driver_version: P.Property
    extensions: P.Property
    glsl_version: P.Property
    major_version: Union[int, P.Int]
    max_compute_invocations: Union[int, P.Int]
    max_compute_shared_memory_size: Union[int, P.Int]
    max_image_units: Union[int, P.Int]
    max_ssbo_bindings: Union[int, P.Int]
    max_ssbo_size: Union[int, P.Int]
    max_samples: Union[int, P.Int]
    max_texture_layers: Union[int, P.Int]
    max_texture_size: Union[int, P.Int]
    max_texture_units: Union[int, P.Int]
    max_ubo_bindings: Union[int, P.Int]
    max_ubo_size: Union[int, P.Int]
    max_work_group_count_x: Union[int, P.Int]
    max_work_group_count_y: Union[int, P.Int]
    max_work_group_count_z: Union[int, P.Int]
    max_work_group_size_x: Union[int, P.Int]
    max_work_group_size_y: Union[int, P.Int]
    max_work_group_size_z: Union[int, P.Int]
    minor_version: Union[int, P.Int]
    profile: Union[bool, P.Bool]
    renderer: P.Property
    supports_compute: Union[bool, P.Bool]
    supports_image_store: Union[bool, P.Bool]
    supports_ssbo: Union[bool, P.Bool]
    supports_ubo: Union[bool, P.Bool]
    valid: Union[bool, P.Bool]
    vendor: P.Property


class PsRenderCapture(PsFrameGraphNode):
    pass


class PsRenderCaptureReply(P.PropSheet):
    capture_id: Union[int, P.Int]
    complete: Union[bool, P.Bool]
    image: P.Property


class PsRenderPass(PsNode):
    filter_keys: Union[list, P.List]
    parameters: Union[list, P.List]
    render_states: Union[list, P.List]
    shader_program: P.Property


class PsRenderPassFilter(PsFrameGraphNode):
    match_any: Union[list, P.List]
    parameters: Union[list, P.List]


class PsRenderSettings(P.PropSheet):
    active_frame_graph: P.Property
    picking_settings: P.Property
    render_capabilities: P.Property
    render_policy: Union[int, P.Enumeration]


class PsRenderStateSet(PsFrameGraphNode):
    render_states: Union[list, P.List]


class PsRenderSurfaceSelector(PsFrameGraphNode):
    external_render_target_size: P.Size
    surface: P.Property
    surface_pixel_ratio: Union[float, P.Real]


class PsRenderTarget(P.PropSheet):
    attachments: Union[list, P.List]


class PsRenderTargetOutput(PsNode):
    attachment_point: Union[int, P.Enumeration]
    face: Union[int, P.Enumeration]
    layer: Union[int, P.Int]
    mip_level: Union[int, P.Int]
    texture: P.Property


class PsRenderTargetSelector(PsFrameGraphNode):
    target: P.Property


class PsSceneLoader(PsComponent):
    source: Union[str, P.Url]
    status: Union[int, P.Enumeration]


class PsScissorTest(PsRenderState):
    bottom: Union[int, P.Int]
    height: Union[int, P.Int]
    left: Union[int, P.Int]
    width: Union[int, P.Int]


class PsScreenRayCaster(P.PropSheet):
    position: P.Point


class PsSeamlessCubemap(PsRenderState):
    pass


class PsShaderImage(P.PropSheet):
    access: Union[int, P.Enumeration]
    format: Union[int, P.Enumeration]
    layer: Union[int, P.Int]
    layered: Union[bool, P.Bool]
    mip_level: Union[int, P.Int]


class PsShaderProgram(P.PropSheet):
    compute_shader_code: Union[str, P.String]
    compute_shader_graph: Union[str, P.String]
    format: Union[int, P.Enumeration]
    fragment_shader_code: Union[str, P.String]
    fragment_shader_graph: Union[str, P.String]
    geometry_shader_code: Union[str, P.String]
    geometry_shader_graph: Union[str, P.String]
    log: Union[str, P.String]
    status: Union[int, P.Enumeration]
    tessellation_control_shader_code: Union[str, P.String]
    tessellation_control_shader_graph: Union[str, P.String]
    tessellation_evaluation_shader_code: Union[str, P.String]
    tessellation_evaluation_shader_graph: Union[str, P.String]
    vertex_shader_code: Union[str, P.String]
    vertex_shader_graph: Union[str, P.String]


class PsShaderProgramBuilder(P.PropSheet):
    compute_shader_code: Union[str, P.String]
    enabled_layers: P.Property
    fragment_shader_code: Union[str, P.String]
    geometry_shader_code: Union[str, P.String]
    shader_program: Union[str, P.String]
    tessellation_control_shader_code: Union[str, P.String]
    tessellation_evaluation_shader_code: Union[str, P.String]
    vertex_shader_code: Union[str, P.String]


class PsSharedGLTexture(P.PropSheet):
    texture_id: Union[int, P.Int]


class PsSortPolicy(PsFrameGraphNode):
    sort_types: Union[list, P.List]


class PsSpotLight(P.PropSheet):
    constant_attenuation: Union[float, P.Number]
    cut_off_angle: Union[float, P.Number]
    linear_attenuation: Union[float, P.Number]
    local_direction: P.Vector3D
    quadratic_attenuation: Union[float, P.Number]
    cone_angle: Union[float, P.Real]
    constant_fade: Union[float, P.Real]
    inner_cone_angle: Union[float, P.Real]
    linear_fade: Union[float, P.Real]
    quadratic_fade: Union[float, P.Real]
    type: Union[int, P.Enumeration]
    ambient_color: Union[str, P.Color]
    brightness: Union[float, P.Real]
    casts_shadow: Union[bool, P.Bool]
    color: Union[str, P.Color]
    scope: P.Property
    shadow_bias: Union[float, P.Real]
    shadow_factor: Union[float, P.Real]
    shadow_filter: Union[float, P.Real]
    shadow_map_far: Union[float, P.Real]
    shadow_map_quality: Union[int, P.Enumeration]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsStencilMask(PsRenderState):
    back_output_mask: Union[int, P.Int]
    front_output_mask: Union[int, P.Int]


class PsStencilOperation(PsRenderState):
    back: P.Property
    front: P.Property


class PsStencilOperationArguments(PsQtObject):
    all_tests_pass_operation: Union[int, P.Enumeration]
    depth_test_failure_operation: Union[int, P.Enumeration]
    face_mode: Union[int, P.Enumeration]
    stencil_test_failure_operation: Union[int, P.Enumeration]


class PsStencilTest(PsRenderState):
    back: P.Property
    front: P.Property


class PsStencilTestArguments(PsQtObject):
    comparison_mask: Union[int, P.Int]
    face_mode: Union[int, P.Enumeration]
    reference_value: Union[int, P.Int]
    stencil_function: Union[int, P.Enumeration]


class PsSubtreeEnabler(PsFrameGraphNode):
    enablement: Union[int, P.Enumeration]


class PsTechnique(P.PropSheet):
    filter_keys: Union[list, P.List]
    graphics_api_filter: P.Property
    parameters: Union[list, P.List]
    render_passes: Union[list, P.List]


class PsTechniqueFilter(PsFrameGraphNode):
    match_all: Union[list, P.List]
    parameters: Union[list, P.List]


class PsTexture1D(P.PropSheet):
    pass


class PsTexture1DArray(P.PropSheet):
    pass


class PsTexture2D(P.PropSheet):
    pass


class PsTexture2DArray(P.PropSheet):
    pass


class PsTexture2DMultisample(P.PropSheet):
    pass


class PsTexture2DMultisampleArray(P.PropSheet):
    pass


class PsTexture3D(P.PropSheet):
    pass


class PsTextureBuffer(P.PropSheet):
    pass


class PsTextureCubeMap(P.PropSheet):
    pass


class PsTextureCubeMapArray(P.PropSheet):
    pass


class PsTextureImage(PsAbstractTextureImage):
    face: Union[int, P.Enumeration]
    layer: Union[int, P.Int]
    mip_level: Union[int, P.Int]
    source: Union[str, P.Url]
    status: Union[int, P.Enumeration]


class PsTextureLoader(P.PropSheet):
    mirrored: Union[bool, P.Bool]
    source: Union[str, P.Url]


class PsTextureRectangle(P.PropSheet):
    pass


class PsViewport(PsFrameGraphNode):
    gamma: P.Rect
    normalized_rect: P.Rect


class PsArmature(PsComponent3D):
    skeleton: P.Property


class PsAttribute(P.PropSheet):
    pass


class PsBuffer(P.PropSheet):
    buffer_flags: Union[int, P.Enumeration]
    format: Union[int, P.Enumeration]
    name_: Union[str, P.String]
    size_multiplier: Union[float, P.Real]
    texture_coord_operation: Union[int, P.Enumeration]
    texture_filter_operation: Union[int, P.Enumeration]


class PsCoreSettings(P.PropSheet):
    bounding_volumes_enabled: Union[bool, P.Bool]


class PsEntityLoader(PsEntity):
    entity: P.Property
    source: Union[str, P.Url]
    status: P.Property


class PsGeometryView(PsNode):
    first_instance: Union[int, P.Int]
    first_vertex: Union[int, P.Int]
    geometry: P.Property
    index_buffer_byte_offset: Union[int, P.Int]
    index_offset: Union[int, P.Int]
    instance_count: Union[int, P.Int]
    primitive_restart: Union[bool, P.Bool]
    primitive_type: Union[int, P.Enumeration]
    restart_index: Union[int, P.Int]
    vertex_count: Union[int, P.Int]
    vertices_per_patch: Union[int, P.Int]


class PsJoint(PsNode):
    index: Union[int, P.Int]
    skeleton_root: P.Property


class PsNodeInstantiator(P.PropSheet):
    active: Union[bool, P.Bool]
    asynchronous: Union[bool, P.Bool]
    count: Union[int, P.Int]
    delegate: P.Property
    model: P.Property
    object: P.Property


class PsQuaternionAnimation(PsPropertyAnimation):
    from_: P.Quaternion
    from_x_rotation: Union[float, P.Number]
    from_y_rotation: Union[float, P.Number]
    from_z_rotation: Union[float, P.Number]
    to: P.Quaternion
    to_x_rotation: Union[float, P.Number]
    to_y_rotation: Union[float, P.Number]
    to_z_rotation: Union[float, P.Number]
    type: Union[int, P.Enumeration]


class PsSkeleton(P.PropSheet):
    root_joint: P.Property
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsSkeletonLoader(PsAbstractSkeleton):
    source: Union[str, P.Url]
    status: P.Property


class PsTransform(P.PropSheet):
    matrix: P.Matrix4x4
    rotation: P.Quaternion
    rotation_x: Union[float, P.Real]
    rotation_y: Union[float, P.Real]
    rotation_z: Union[float, P.Real]
    scale: P.Vector3D
    scale3d: P.Vector3D
    translation: P.Vector3D
    is_shareable: Union[bool, P.Bool]
    child_nodes: Union[list, P.List]
    data: Union[list, P.List]
    transform_space: Union[int, P.Enumeration]
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity: Union[float, P.Real]
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags: Union[int, P.Int]
    up: P.Vector3D
    visible: Union[bool, P.Bool]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    children: Union[list, P.List]
    parent: P.Property
    resources: Union[list, P.List]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]
    object_name: Union[str, P.String]


class PsConeGeometry(P.PropSheet):
    bottom_radius: Union[float, P.Real]
    has_bottom_endcap: Union[bool, P.Bool]
    has_top_endcap: Union[bool, P.Bool]
    index_attribute: P.Property
    length: Union[float, P.Real]
    normal_attribute: P.Property
    position_attribute: P.Property
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    tex_coord_attribute: P.Property
    top_radius: Union[float, P.Real]


class PsConeGeometryView(P.PropSheet):
    bottom_radius: Union[float, P.Real]
    has_bottom_endcap: Union[bool, P.Bool]
    has_top_endcap: Union[bool, P.Bool]
    length: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    top_radius: Union[float, P.Real]


class PsConeMesh(P.PropSheet):
    bottom_radius: Union[float, P.Real]
    has_bottom_endcap: Union[bool, P.Bool]
    has_top_endcap: Union[bool, P.Bool]
    length: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    top_radius: Union[float, P.Real]


class PsCuboidGeometry(P.PropSheet):
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property
    x_extent: Union[float, P.Real]
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent: Union[float, P.Real]
    yz_mesh_resolution: P.Size
    z_extent: Union[float, P.Real]


class PsCuboidGeometryView(P.PropSheet):
    x_extent: Union[float, P.Real]
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent: Union[float, P.Real]
    yz_mesh_resolution: P.Size
    z_extent: Union[float, P.Real]


class PsCuboidMesh(P.PropSheet):
    x_extent: Union[float, P.Real]
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent: Union[float, P.Real]
    yz_mesh_resolution: P.Size
    z_extent: Union[float, P.Real]


class PsCylinderGeometry(P.PropSheet):
    index_attribute: P.Property
    length: Union[float, P.Real]
    normal_attribute: P.Property
    position_attribute: P.Property
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    tex_coord_attribute: P.Property


class PsCylinderGeometryView(P.PropSheet):
    length: Union[float, P.Real]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsCylinderMesh(P.PropSheet):
    length: Union[float, P.Real]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsDiffuseMapMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: P.Property
    shininess: Union[float, P.Real]
    specular: Union[str, P.Color]
    texture_scale: Union[float, P.Real]


class PsDiffuseSpecularMapMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: P.Property
    shininess: Union[float, P.Real]
    specular: P.Property
    texture_scale: Union[float, P.Real]


class PsDiffuseSpecularMaterial(P.PropSheet):
    alpha_blending: Union[bool, P.Bool]
    ambient: Union[str, P.Color]
    diffuse: P.Var
    normal: P.Var
    shininess: Union[float, P.Real]
    specular: P.Var
    texture_scale: Union[float, P.Real]


class PsExtrudedTextGeometry(P.PropSheet):
    depth: Union[float, P.Number]
    font: P.Property
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    text: P.Property


class PsExtrudedTextMesh(P.PropSheet):
    depth: Union[float, P.Number]
    font: P.Property
    text: P.Property


class PsFirstPersonCameraController(PsEntity):
    acceleration: Union[float, P.Real]
    camera: P.Property
    deceleration: Union[float, P.Real]
    linear_speed: Union[float, P.Real]
    look_speed: Union[float, P.Real]


class PsForwardRenderer(P.PropSheet):
    buffers_to_clear: Union[str, P.Color]
    camera: P.Property
    clear_color: Union[str, P.Color]
    external_render_target_size: P.Property
    frustum_culling: Union[bool, P.Bool]
    gamma: Union[float, P.Real]
    show_debug_overlay: Union[bool, P.Bool]
    surface: P.Property
    viewport_rect: P.Rect


class PsGoochMaterial(PsMaterial):
    alpha: Union[float, P.Real]
    beta: Union[float, P.Real]
    cool: Union[str, P.Color]
    diffuse: Union[str, P.Color]
    shininess: Union[float, P.Real]
    specular: Union[str, P.Color]
    warm: Union[str, P.Color]


class PsMetalRoughMaterial(P.PropSheet):
    ambient_occlusion: P.Property
    base_color: P.Property
    metalness: P.Property
    normal: P.Property
    roughness: P.Property
    texture_scale: Union[float, P.Real]


class PsNormalDiffuseMapAlphaMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: P.Property
    normal: P.Property
    shininess: Union[float, P.Real]
    specular: Union[str, P.Color]
    texture_scale: Union[float, P.Real]


class PsNormalDiffuseMapMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: P.Property
    normal: P.Property
    shininess: Union[float, P.Real]
    specular: Union[str, P.Color]
    texture_scale: Union[float, P.Real]


class PsNormalDiffuseSpecularMapMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: P.Property
    normal: P.Property
    shininess: Union[float, P.Real]
    specular: P.Property
    texture_scale: Union[float, P.Real]


class PsOrbitCameraController(PsEntity):
    camera: P.Property
    linear_speed: Union[float, P.Real]
    look_speed: Union[float, P.Real]
    zoom_limit: Union[float, P.Real]


class PsPerVertexColorMaterial(PsMaterial):
    pass


class PsPhongAlphaMaterial(PsMaterial):
    alpha: Union[float, P.Real]
    ambient: Union[str, P.Color]
    blend_function_arg: P.Property
    destination_alpha_arg: P.Property
    destination_rgb_arg: P.Property
    diffuse: Union[str, P.Color]
    shininess: Union[float, P.Real]
    source_alpha_arg: P.Property
    source_rgb_arg: P.Property
    specular: Union[str, P.Color]


class PsPhongMaterial(PsMaterial):
    ambient: Union[str, P.Color]
    diffuse: Union[str, P.Color]
    shininess: Union[float, P.Real]
    specular: Union[str, P.Color]


class PsPlaneGeometry(P.PropSheet):
    height: Union[float, P.Real]
    index_attribute: P.Property
    mirrored: Union[bool, P.Bool]
    normal_attribute: P.Property
    position_attribute: P.Property
    resolution: P.Size
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property
    width: Union[float, P.Real]


class PsPlaneGeometryView(P.PropSheet):
    height: Union[float, P.Real]
    mesh_resolution: P.Size
    mirrored: Union[bool, P.Bool]
    width: Union[float, P.Real]


class PsPlaneMesh(P.PropSheet):
    height: Union[float, P.Real]
    mesh_resolution: P.Size
    mirrored: Union[bool, P.Bool]
    width: Union[float, P.Real]


class PsSkyboxEntity(P.PropSheet):
    pass


class PsSphereGeometry(P.PropSheet):
    generate_tangents: Union[bool, P.Bool]
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property


class PsSphereGeometryView(P.PropSheet):
    generate_tangents: Union[bool, P.Bool]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsSphereMesh(P.PropSheet):
    generate_tangents: Union[bool, P.Bool]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsText2DEntity(P.PropSheet):
    color: P.Property
    font: P.Property
    height: Union[float, P.Number]
    text: P.Property
    width: Union[float, P.Number]


class PsTorusGeometry(P.PropSheet):
    index_attribute: P.Property
    minor_radius: Union[float, P.Real]
    normal_attribute: P.Property
    position_attribute: P.Property
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]
    tex_coord_attribute: P.Property


class PsTorusGeometryView(P.PropSheet):
    minor_radius: Union[float, P.Real]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsTorusMesh(P.PropSheet):
    minor_radius: Union[float, P.Real]
    radius: Union[float, P.Real]
    rings: Union[int, P.Int]
    slices: Union[int, P.Int]


class PsFrameAction(PsComponent3D):
    pass


class PsScene2D(P.PropSheet):
    entities: Union[list, P.List]
    item: P.Property
    mouse_enabled: Union[bool, P.Bool]
    output: P.Property
    render_policy: Union[int, P.Enumeration]


class PsScene3D(PsItem):
    aspects: Union[list, P.List]
    camera_aspect_ratio_mode: Union[int, P.Enumeration]
    compositing_mode: Union[int, P.Enumeration]
    entity: P.Property
    hover_enabled: Union[bool, P.Bool]
    multisample: Union[bool, P.Bool]


class PsAreaSeries(PsAbstractSeries):
    axis_angular: P.Property
    axis_radial: P.Property
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    border_color: Union[str, P.Color]
    border_width: Union[float, P.Real]
    brush: P.Property
    brush_filename: P.Property
    color: Union[str, P.Color]
    lower_series: P.Property
    point_labels_clipping: Union[bool, P.Bool]
    point_labels_color: P.Font
    point_labels_font: P.Font
    point_labels_format: Union[str, P.String]
    point_labels_visible: Union[bool, P.Bool]
    upper_series: P.Property


class PsBarCategoryAxis(PsAbstractAxis):
    categories: P.Property
    count: Union[int, P.Int]
    max: Union[str, P.String]
    min: Union[str, P.String]


class PsBarSeries(PsAbstractBarSeries):
    pass


class PsBarSet(P.PropSheet):
    border_color: Union[str, P.Color]
    border_width: Union[float, P.Real]
    brush_filename: Union[str, P.String]
    color: Union[str, P.Color]
    count: Union[int, P.Int]
    label: Union[str, P.String]
    label_color: Union[str, P.Color]
    label_font: P.Font
    values: P.Property


class PsBoxPlotSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    box_outline_visible: Union[bool, P.Bool]
    box_width: Union[float, P.Real]
    brush_filename: Union[str, P.String]
    count: Union[int, P.Int]


class PsBoxSet(P.PropSheet):
    brush_filename: Union[str, P.String]
    count: Union[int, P.Int]
    label: Union[str, P.String]
    values: Union[list, P.List]


class PsCandlestickSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    body_outline_visible: Union[bool, P.Bool]
    body_width: Union[float, P.Real]
    brush_filename: Union[str, P.String]
    caps_visible: Union[bool, P.Bool]
    caps_width: Union[float, P.Real]
    count: Union[int, P.Int]
    decreasing_color: Union[str, P.Color]
    increasing_color: Union[str, P.Color]
    maximum_column_width: Union[float, P.Real]
    minimum_column_width: Union[float, P.Real]


class PsCandlestickSet(P.PropSheet):
    brush_filename: Union[str, P.String]
    close: Union[float, P.Real]
    high: Union[float, P.Real]
    low: Union[float, P.Real]
    open: Union[float, P.Real]
    timestamp: Union[float, P.Real]


class PsCategoryAxis(PsAbstractAxis):
    categories_labels: P.Property
    count: Union[int, P.Int]
    labels_position: Union[int, P.Enumeration]
    start_value: Union[int, P.Int]


class PsCategoryRange(P.PropSheet):
    end_value: Union[int, P.Int]
    label: Union[str, P.String]


class PsDateTimeAxis(PsAbstractAxis):
    format: Union[str, P.String]
    max: P.Property
    min: P.Property
    tick_count: Union[int, P.Int]


class PsHBarModelMapper(P.PropSheet):
    column_count: Union[int, P.Int]
    first_bar_set_row: Union[int, P.Int]
    first_column: Union[int, P.Int]
    last_bar_set_row: Union[int, P.Int]
    model: P.Property
    series: P.Property


class PsHBoxPlotModelMapper(P.PropSheet):
    column_count: Union[int, P.Int]
    first_box_set_row: Union[int, P.Int]
    first_column: Union[int, P.Int]
    last_box_set_row: Union[int, P.Int]
    model: P.Property
    series: P.Property


class PsHCandlestickModelMapper(P.PropSheet):
    close_column: Union[int, P.Int]
    first_set_row: Union[int, P.Int]
    high_column: Union[int, P.Int]
    last_set_row: Union[int, P.Int]
    low_column: Union[int, P.Int]
    model: P.Property
    open_column: Union[int, P.Int]
    series: P.Property
    timestamp_column: Union[int, P.Int]


class PsHorizontalBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalPercentBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalStackedBarSeries(PsAbstractBarSeries):
    pass


class PsHPieModelMapper(P.PropSheet):
    column_count: Union[int, P.Int]
    first_column: Union[int, P.Int]
    labels_row: Union[int, P.Int]
    model: P.Property
    series: P.Property
    values_row: Union[int, P.Int]


class PsHXYModelMapper(P.PropSheet):
    column_count: Union[int, P.Int]
    first_column: Union[int, P.Int]
    model: P.Property
    series: P.Property
    x_row: Union[int, P.Int]
    y_row: Union[int, P.Int]


class PsLegend(P.PropSheet):
    alignment: P.Property
    background_visible: Union[bool, P.Bool]
    border_color: Union[str, P.Color]
    color: Union[str, P.Color]
    font: P.Font
    label_color: Union[str, P.Color]
    marker_shape: Union[int, P.Enumeration]
    reverse_markers: Union[bool, P.Bool]
    show_tool_tips: Union[bool, P.Bool]
    visible: Union[bool, P.Bool]


class PsLineSeries(PsXYSeries):
    cap_style: P.Property
    count: Union[int, P.Int]
    style: P.Property
    width: Union[float, P.Real]


class PsLogValueAxis(PsAbstractAxis):
    base: Union[float, P.Real]
    label_format: Union[float, P.Real]
    max: Union[float, P.Real]
    min: Union[float, P.Real]
    minor_tick_count: Union[int, P.Int]
    tick_count: Union[int, P.Int]


class PsMargins(P.PropSheet):
    bottom: Union[int, P.Int]
    left: Union[int, P.Int]
    right: Union[int, P.Int]
    top: Union[int, P.Int]


class PsPercentBarSeries(PsAbstractBarSeries):
    pass


class PsPieSeries(PsAbstractSeries):
    count: Union[int, P.Int]
    end_angle: Union[float, P.Real]
    hole_size: Union[float, P.Real]
    horizontal_position: Union[float, P.Real]
    size: Union[float, P.Real]
    start_angle: Union[float, P.Real]
    sum: Union[float, P.Real]
    vertical_position: Union[float, P.Real]


class PsPieSlice(P.PropSheet):
    angle_span: Union[float, P.Real]
    border_color: Union[str, P.Color]
    border_width: Union[int, P.Int]
    brush_filename: Union[str, P.String]
    color: Union[str, P.Color]
    explode_distance_factor: Union[float, P.Real]
    exploded: Union[bool, P.Bool]
    label: Union[str, P.String]
    label_arm_length_factor: Union[float, P.Real]
    label_color: Union[str, P.Color]
    label_font: P.Font
    label_position: Union[int, P.Enumeration]
    label_visible: Union[bool, P.Bool]
    percentage: Union[float, P.Real]
    start_angle: Union[float, P.Real]
    value: Union[float, P.Real]


class PsPolarChartView(PsChartView):
    pass


class PsScatterSeries(PsXYSeries):
    border_color: Union[str, P.Color]
    border_width: Union[float, P.Real]
    brush: P.Property
    brush_filename: Union[str, P.String]
    count: Union[int, P.Int]
    marker_shape: Union[int, P.Enumeration]
    marker_size: Union[float, P.Real]


class PsSplineSeries(PsXYSeries):
    cap_style: P.Property
    count: Union[int, P.Int]
    style: P.Property
    width: Union[float, P.Real]


class PsStackedBarSeries(PsAbstractBarSeries):
    pass


class PsValueAxis(PsAbstractAxis):
    label_format: Union[str, P.String]
    max: Union[float, P.Real]
    min: Union[float, P.Real]
    minor_tick_count: Union[int, P.Int]
    tick_anchor: Union[float, P.Real]
    tick_count: Union[int, P.Int]
    tick_interval: Union[float, P.Real]
    tick_type: Union[int, P.Enumeration]


class PsVBarModelMapper(P.PropSheet):
    first_bar_set_column: Union[int, P.Int]
    first_row: Union[int, P.Int]
    last_bar_set_column: Union[int, P.Int]
    model: P.Property
    row_count: Union[int, P.Int]
    series: P.Property


class PsVBoxPlotModelMapper(P.PropSheet):
    first_box_set_column: Union[int, P.Int]
    first_row: Union[int, P.Int]
    last_box_set_column: Union[int, P.Int]
    model: P.Property
    row_count: Union[int, P.Int]
    series: P.Property


class PsVCandlestickModelMapper(P.PropSheet):
    close_row: Union[int, P.Int]
    first_set_column: Union[int, P.Int]
    high_row: Union[int, P.Int]
    last_set_column: Union[int, P.Int]
    low_row: Union[int, P.Int]
    model: P.Property
    open_row: Union[int, P.Int]
    series: P.Property
    timestamp_row: Union[int, P.Int]


class PsVPieModelMapper(P.PropSheet):
    first_row: Union[int, P.Int]
    labels_column: Union[int, P.Int]
    model: P.Property
    row_count: Union[int, P.Int]
    series: P.Property
    values_column: Union[int, P.Int]


class PsVXYModelMapper(P.PropSheet):
    first_row: Union[int, P.Int]
    model: P.Property
    row_count: Union[int, P.Int]
    series: P.Property
    x_column: Union[int, P.Int]
    y_column: Union[int, P.Int]


class PsXYPoint(P.PropSheet):
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsActionGroup(PsQtObject):
    actions: Union[list, P.List]
    checked_action: P.Property
    enabled: Union[bool, P.Bool]
    exclusive: Union[bool, P.Bool]


class PsApplicationWindow(PsWindow):
    active_focus_control: P.Property
    background: P.Property
    content_data: Union[list, P.List]
    content_item: P.Property
    font: P.Font
    footer: P.Property
    header: P.Property
    locale: P.Property
    menu_bar: P.Property


class PsBusyIndicator(PsControl):
    running: Union[bool, P.Bool]


class PsButtonGroup(PsQtObject):
    buttons: Union[list, P.List]
    check_state: Union[int, P.Enumeration]
    checked_button: P.Property
    exclusive: Union[bool, P.Bool]


class PsCheckBox(PsAbstractButton):
    check_state: Union[int, P.Enumeration]
    next_check_state: P.Property
    tristate: Union[bool, P.Bool]


class PsCheckDelegate(PsItemDelegate):
    check_state: Union[int, P.Enumeration]
    next_check_state: P.Property
    tristate: Union[bool, P.Bool]


class PsComboBox(PsControl):
    acceptable_input: Union[bool, P.Bool]
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_text: Union[str, P.String]
    current_value: Union[str, P.String]
    delegate: P.Property
    display_text: Union[str, P.String]
    down: Union[bool, P.Bool]
    edit_text: Union[str, P.String]
    editable: Union[bool, P.Bool]
    flat: Union[bool, P.Bool]
    highlighted_index: Union[int, P.Int]
    implicit_content_width_policy: Union[int, P.Enumeration]
    implicit_indicator_height: Union[float, P.Real]
    implicit_indicator_width: Union[float, P.Real]
    indicator: P.Property
    input_method_composing: Union[bool, P.Bool]
    input_method_hints: P.Property
    model: P.Property
    popup: P.Property
    pressed: Union[bool, P.Bool]
    select_text_by_mouse: Union[bool, P.Bool]
    text_role: Union[str, P.String]
    validator: P.Property
    value_role: Union[str, P.String]


class PsDelayButton(PsAbstractButton):
    delay: Union[int, P.Int]
    progress: Union[float, P.Real]
    transition: P.Property


class PsDial(PsControl):
    angle: Union[float, P.Real]
    from_: Union[float, P.Real]
    handle: P.Property
    input_mode: Union[int, P.Enumeration]
    live: Union[bool, P.Bool]
    position: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    snap_mode: Union[int, P.Enumeration]
    step_size: Union[float, P.Real]
    to: Union[float, P.Real]
    value: Union[float, P.Real]
    wrap: Union[bool, P.Bool]


class PsDialogButtonBox(PsContainer):
    alignment: P.Property
    button_layout: Union[int, P.Enumeration]
    delegate: P.Property
    position: Union[int, P.Enumeration]
    standard_buttons: Union[int, P.Enumeration]


class PsDrawer(PsPopup):
    drag_margin: Union[float, P.Real]
    edge: Union[int, P.Enumeration]
    interactive: Union[bool, P.Bool]
    position: Union[float, P.Real]


class PsGroupBox(PsFrame):
    implicit_label_height: Union[float, P.Real]
    implicit_label_width: Union[float, P.Real]
    label: P.Property
    title: Union[str, P.String]


class PsHorizontalHeaderView(PsTableView):
    model: P.Property
    sync_view: P.Property
    text_role: P.Property


class PsLabel(PsText):
    background: P.Property
    bottom_inset: Union[float, P.Real]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    right_inset: Union[float, P.Real]
    top_inset: Union[float, P.Real]


class PsMenu(P.PropSheet):
    cascade: Union[bool, P.Bool]
    content_data: Union[list, P.List]
    content_model: P.Property
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    delegate: P.Property
    focus: Union[bool, P.Bool]
    overlap: Union[float, P.Real]
    title: Union[str, P.String]
    active_focus: Union[bool, P.Bool]
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_margin: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    clip: Union[bool, P.Bool]
    close_policy: Union[int, P.Enumeration]
    content_children: Union[list, P.List]
    content_height: Union[float, P.Real]
    content_item: P.Property
    content_width: Union[float, P.Real]
    dim: Union[bool, P.Bool]
    enabled: Union[bool, P.Bool]
    enter: P.Property
    exit: P.Property
    font: P.Font
    height: Union[float, P.Real]
    horizontal_padding: Union[float, P.Real]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_margin: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    margins: Union[float, P.Real]
    mirrored: Union[bool, P.Bool]
    modal: Union[bool, P.Bool]
    opacity: Union[float, P.Real]
    opened: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    right_inset: Union[float, P.Real]
    right_margin: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    scale: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_margin: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    transform_origin: Union[int, P.Enumeration]
    vertical_padding: Union[float, P.Real]
    visible: Union[bool, P.Bool]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]
    data: Union[list, P.List]
    icon: P.Icon
    items: Union[list, P.List]
    menu_bar: P.Property
    menu_item: P.Property
    minimum_width: Union[int, P.Int]
    parent_menu: P.Property
    system_tray_icon: P.Property
    type: Union[int, P.Enumeration]


class PsMenuBar(P.PropSheet):
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    delegate: P.Property
    menus: Union[list, P.List]
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]
    content_model: P.Property
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    content_item: P.Property
    focus_policy: Union[int, P.Enumeration]
    focus_reason: Union[int, P.Enumeration]
    font: P.Font
    horizontal_padding: Union[float, P.Real]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    mirrored: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    right_inset: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    vertical_padding: Union[float, P.Real]
    visual_focus: Union[bool, P.Bool]
    wheel_enabled: Union[bool, P.Bool]
    active_focus: Union[bool, P.Bool]
    active_focus_on_tab: Union[bool, P.Bool]
    anchors: P.Anchors
    antialiasing: Union[bool, P.Bool]
    baseline_offset: Union[int, P.Int]
    children: Union[list, P.List]
    children_rect: P.ChildrenRect
    clip: Union[bool, P.Bool]
    containment_mask: P.Property
    data: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    focus: Union[bool, P.Bool]
    height: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    opacity: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    resources: Union[list, P.List]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transform: Union[list, P.List]
    transform_origin: Union[int, P.Enumeration]
    transitions: Union[list, P.List]
    visible: Union[bool, P.Bool]
    visible_children: Union[list, P.List]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]
    window: P.Property


class PsMenuBarItem(PsAbstractButton):
    highlighted: Union[bool, P.Bool]
    menu: P.Property
    menu_bar: P.Property


class PsMenuItem(P.PropSheet):
    arrow: P.Property
    highlighted: Union[bool, P.Bool]
    menu: P.Property
    sub_menu: P.Property
    action: P.Property
    auto_exclusive: Union[bool, P.Bool]
    auto_repeat: Union[bool, P.Bool]
    auto_repeat_delay: Union[int, P.Int]
    auto_repeat_interval: Union[int, P.Int]
    checkable: Union[bool, P.Bool]
    checked: Union[bool, P.Bool]
    display: Union[int, P.Enumeration]
    down: Union[bool, P.Bool]
    icon: P.Icon
    implicit_indicator_height: Union[float, P.Real]
    implicit_indicator_width: Union[float, P.Real]
    indicator: P.Property
    press_x: Union[float, P.Real]
    press_y: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    text: Union[str, P.String]
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    content_item: P.Property
    focus_policy: Union[int, P.Enumeration]
    focus_reason: Union[int, P.Enumeration]
    font: P.Font
    horizontal_padding: Union[float, P.Real]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    mirrored: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    right_inset: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    vertical_padding: Union[float, P.Real]
    visual_focus: Union[bool, P.Bool]
    wheel_enabled: Union[bool, P.Bool]
    active_focus: Union[bool, P.Bool]
    active_focus_on_tab: Union[bool, P.Bool]
    anchors: P.Anchors
    antialiasing: Union[bool, P.Bool]
    baseline_offset: Union[int, P.Int]
    children: Union[list, P.List]
    children_rect: P.ChildrenRect
    clip: Union[bool, P.Bool]
    containment_mask: P.Property
    data: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    focus: Union[bool, P.Bool]
    height: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    opacity: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    resources: Union[list, P.List]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transform: Union[list, P.List]
    transform_origin: Union[int, P.Enumeration]
    transitions: Union[list, P.List]
    visible: Union[bool, P.Bool]
    visible_children: Union[list, P.List]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]
    group: P.Property
    role: Union[int, P.Enumeration]
    separator: Union[bool, P.Bool]
    shortcut: P.Property


class PsMenuSeparator(P.PropSheet):
    available_height: Union[float, P.Real]
    available_width: Union[float, P.Real]
    background: P.Property
    bottom_inset: Union[float, P.Real]
    bottom_padding: Union[float, P.Real]
    content_item: P.Property
    focus_policy: Union[int, P.Enumeration]
    focus_reason: Union[int, P.Enumeration]
    font: P.Font
    horizontal_padding: Union[float, P.Real]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    implicit_content_height: Union[float, P.Real]
    implicit_content_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    locale: P.Property
    mirrored: Union[bool, P.Bool]
    padding: Union[float, P.Real]
    right_inset: Union[float, P.Real]
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_inset: Union[float, P.Real]
    top_padding: Union[float, P.Real]
    vertical_padding: Union[float, P.Real]
    visual_focus: Union[bool, P.Bool]
    wheel_enabled: Union[bool, P.Bool]
    active_focus: Union[bool, P.Bool]
    active_focus_on_tab: Union[bool, P.Bool]
    anchors: P.Anchors
    antialiasing: Union[bool, P.Bool]
    baseline_offset: Union[int, P.Int]
    children: Union[list, P.List]
    children_rect: P.ChildrenRect
    clip: Union[bool, P.Bool]
    containment_mask: P.Property
    data: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    focus: Union[bool, P.Bool]
    height: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    opacity: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    resources: Union[list, P.List]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transform: Union[list, P.List]
    transform_origin: Union[int, P.Enumeration]
    transitions: Union[list, P.List]
    visible: Union[bool, P.Bool]
    visible_children: Union[list, P.List]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]
    arrow: P.Property
    highlighted: Union[bool, P.Bool]
    menu: P.Property
    sub_menu: P.Property
    action: P.Property
    auto_exclusive: Union[bool, P.Bool]
    auto_repeat: Union[bool, P.Bool]
    auto_repeat_delay: Union[int, P.Int]
    auto_repeat_interval: Union[int, P.Int]
    checkable: Union[bool, P.Bool]
    checked: Union[bool, P.Bool]
    display: Union[int, P.Enumeration]
    down: Union[bool, P.Bool]
    icon: P.Icon
    implicit_indicator_height: Union[float, P.Real]
    implicit_indicator_width: Union[float, P.Real]
    indicator: P.Property
    press_x: Union[float, P.Real]
    press_y: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    text: Union[str, P.String]
    group: P.Property
    role: Union[int, P.Enumeration]
    separator: Union[bool, P.Bool]
    shortcut: P.Property


class PsOverlay(PsItem):
    pass


class PsPage(PsPane):
    footer: P.Property
    header: P.Property
    implicit_footer_height: Union[float, P.Real]
    implicit_footer_width: Union[float, P.Real]
    implicit_header_height: Union[float, P.Real]
    implicit_header_width: Union[float, P.Real]
    title: Union[str, P.String]


class PsPageIndicator(PsControl):
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    delegate: P.Property
    interactive: Union[bool, P.Bool]


class PsProgressBar(PsControl):
    from_: Union[float, P.Real]
    indeterminate: Union[bool, P.Bool]
    position: Union[float, P.Real]
    to: Union[float, P.Real]
    value: Union[float, P.Real]
    visual_position: Union[float, P.Real]


class PsRadioButton(PsAbstractButton):
    pass


class PsRadioDelegate(PsItemDelegate):
    pass


class PsRangeSlider(PsControl):
    first: P.First
    from_: Union[float, P.Real]
    horizontal: Union[bool, P.Bool]
    live: Union[bool, P.Bool]
    orientation: Union[int, P.Enumeration]
    second: P.Second
    snap_mode: Union[int, P.Enumeration]
    step_size: Union[float, P.Real]
    to: Union[float, P.Real]
    touch_drag_threshold: P.Property
    vertical: Union[bool, P.Bool]


class PsRoundButton(PsButton):
    radius: Union[float, P.Real]


class PsScrollBar(PsControl):
    active: Union[bool, P.Bool]
    horizontal: Union[bool, P.Bool]
    interactive: Union[bool, P.Bool]
    minimum_size: Union[float, P.Real]
    orientation: Union[int, P.Enumeration]
    policy: Union[int, P.Enumeration]
    position: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    size: Union[float, P.Real]
    snap_mode: Union[int, P.Enumeration]
    step_size: Union[float, P.Real]
    vertical: Union[bool, P.Bool]
    visual_position: Union[float, P.Real]
    visual_size: Union[float, P.Real]


class PsScrollIndicator(PsControl):
    active: Union[bool, P.Bool]
    horizontal: Union[bool, P.Bool]
    minimum_size: Union[float, P.Real]
    orientation: Union[int, P.Enumeration]
    position: Union[float, P.Real]
    size: Union[float, P.Real]
    vertical: Union[bool, P.Bool]
    visual_position: Union[float, P.Real]
    visual_size: Union[float, P.Real]


class PsScrollView(PsPane):
    content_children: Union[list, P.List]
    content_data: Union[list, P.List]


class PsSlider(PsControl):
    from_: Union[float, P.Real]
    handle: P.Property
    horizontal: Union[bool, P.Bool]
    implicit_handle_height: Union[float, P.Real]
    implicit_handle_width: Union[float, P.Real]
    live: Union[bool, P.Bool]
    orientation: Union[int, P.Enumeration]
    position: Union[float, P.Real]
    pressed: Union[bool, P.Bool]
    snap_mode: Union[int, P.Enumeration]
    step_size: Union[float, P.Real]
    to: Union[float, P.Real]
    touch_drag_threshold: P.Property
    value: Union[float, P.Real]
    vertical: Union[bool, P.Bool]
    visual_position: Union[float, P.Real]


class PsSpinBox(PsControl):
    display_text: Union[str, P.String]
    down: P.Down
    editable: Union[bool, P.Bool]
    from_: Union[int, P.Int]
    input_method_composing: Union[bool, P.Bool]
    input_method_hints: P.Property
    step_size: Union[int, P.Int]
    text_from_value: P.Property
    to: Union[int, P.Int]
    up: P.Up
    validator: P.Property
    value: Union[int, P.Int]
    value_from_text: P.Property
    wrap: Union[bool, P.Bool]


class PsSplitHandle(PsQtObject):
    pass


class PsSplitView(PsContainer):
    handle: P.Property
    orientation: Union[int, P.Enumeration]
    resizing: Union[bool, P.Bool]


class PsStackView(PsControl):
    busy: Union[bool, P.Bool]
    current_item: P.Property
    depth: Union[int, P.Int]
    empty: Union[bool, P.Bool]
    initial_item: P.Var
    pop_enter: P.Property
    pop_exit: P.Property
    push_enter: P.Property
    push_exit: P.Property
    replace_enter: P.Property
    replace_exit: P.Property


class PsSwipeDelegate(PsItemDelegate):
    swipe: P.Swipe


class PsSwipeView(PsContainer):
    horizontal: Union[bool, P.Bool]
    interactive: Union[bool, P.Bool]
    orientation: Union[int, P.Enumeration]
    vertical: Union[bool, P.Bool]


class PsSwitch(PsAbstractButton):
    position: Union[float, P.Real]
    visual_position: Union[float, P.Real]


class PsSwitchDelegate(PsItemDelegate):
    position: Union[float, P.Real]
    visual_position: Union[float, P.Real]


class PsTabBar(PsContainer):
    content_height: Union[float, P.Real]
    content_width: Union[float, P.Real]
    position: Union[int, P.Enumeration]


class PsTabButton(PsAbstractButton):
    pass


class PsTextArea(PsTextEdit):
    background: P.Property
    bottom_inset: Union[float, P.Real]
    focus_reason: Union[int, P.Enumeration]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    placeholder_text: Union[str, P.String]
    placeholder_text_color: Union[str, P.Color]
    right_inset: Union[float, P.Real]
    top_inset: Union[float, P.Real]


class PsTextField(PsTextInput):
    background: P.Property
    bottom_inset: Union[float, P.Real]
    focus_reason: Union[int, P.Enumeration]
    hover_enabled: Union[bool, P.Bool]
    hovered: Union[bool, P.Bool]
    implicit_background_height: Union[float, P.Real]
    implicit_background_width: Union[float, P.Real]
    left_inset: Union[float, P.Real]
    placeholder_text: Union[str, P.String]
    placeholder_text_color: Union[str, P.Color]
    right_inset: Union[float, P.Real]
    top_inset: Union[float, P.Real]


class PsToolBar(PsPane):
    position: Union[int, P.Enumeration]


class PsToolButton(PsButton):
    pass


class PsToolSeparator(PsControl):
    horizontal: Union[bool, P.Bool]
    orientation: Union[int, P.Enumeration]
    vertical: Union[bool, P.Bool]


class PsToolTip(PsPopup):
    delay: Union[int, P.Int]
    text: Union[str, P.String]
    timeout: Union[int, P.Int]


class PsTumbler(PsControl):
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property
    delegate: P.Property
    model: P.Property
    moving: Union[bool, P.Bool]
    visible_item_count: Union[int, P.Int]
    wrap: Union[bool, P.Bool]


class PsVerticalHeaderView(PsTableView):
    model: P.Property
    sync_view: P.Property
    text_role: P.Property


class PsAccessible(P.PropSheet):
    check_state_mixed: Union[bool, P.Bool]
    checkable: Union[bool, P.Bool]
    checked: Union[bool, P.Bool]
    default_button: Union[bool, P.Bool]
    description: Union[str, P.String]
    editable: Union[bool, P.Bool]
    focusable: Union[bool, P.Bool]
    focused: Union[bool, P.Bool]
    ignored: Union[bool, P.Bool]
    multi_line: Union[bool, P.Bool]
    name_: Union[str, P.String]
    password_edit: Union[bool, P.Bool]
    pressed: Union[bool, P.Bool]
    read_only: Union[bool, P.Bool]
    role: Union[int, P.Enumeration]
    search_edit: Union[bool, P.Bool]
    selectable: Union[bool, P.Bool]
    selectable_text: Union[bool, P.Bool]
    selected: Union[bool, P.Bool]


class PsAnchorAnimation(PsAnimation):
    duration: Union[int, P.Int]
    easing: P.Easing
    targets: Union[list, P.List]


class PsAnchorChanges(P.PropSheet):
    anchors: P.Anchors
    target: P.Property


class PsAnimatedImage(PsImage):
    current_frame: Union[int, P.Int]
    frame_count: Union[int, P.Int]
    paused: Union[bool, P.Bool]
    playing: Union[bool, P.Bool]
    source: Union[str, P.Url]
    speed: Union[float, P.Real]


class PsAnimatedSprite(PsItem):
    current_frame: Union[int, P.Int]
    finish_behavior: Union[int, P.Enumeration]
    frame_count: Union[int, P.Int]
    frame_duration: Union[int, P.Int]
    frame_height: Union[int, P.Int]
    frame_rate: P.Property
    frame_sync: Union[bool, P.Bool]
    frame_width: Union[int, P.Int]
    frame_x: Union[int, P.Int]
    frame_y: Union[int, P.Int]
    interpolate: Union[bool, P.Bool]
    loops: Union[int, P.Int]
    paused: Union[bool, P.Bool]
    reverse: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    source: Union[str, P.Url]


class PsBehavior(P.PropSheet):
    animation: P.Property
    enabled: Union[bool, P.Bool]
    target_property: P.Property
    target_value: P.Property


class PsBorderImage(PsItem):
    asynchronous: Union[bool, P.Bool]
    border: P.Border
    cache: Union[bool, P.Bool]
    current_frame: Union[int, P.Int]
    frame_count: Union[int, P.Int]
    horizontal_tile_mode: Union[int, P.Enumeration]
    mirror: Union[bool, P.Bool]
    progress: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    source: Union[str, P.Url]
    source_size: P.Property
    status: Union[int, P.Enumeration]
    vertical_tile_mode: Union[int, P.Enumeration]


class PsBorderImageMesh(P.PropSheet):
    border: P.Border
    horizontal_tile_mode: Union[int, P.Enumeration]
    size: P.Size
    vertical_tile_mode: Union[int, P.Enumeration]


class PsCanvasGradient(P.PropSheet):
    pass


class PsCanvasImageData(P.PropSheet):
    data: P.Property
    height: Union[int, P.Int]
    width: Union[int, P.Int]


class PsCanvasPixelArray(P.PropSheet):
    length: Union[int, P.Int]


class PsColorAnimation(PsPropertyAnimation):
    from_: Union[str, P.Color]
    to: Union[str, P.Color]


class PsColorGroup(PsQtObject):
    alternate_base: Union[str, P.Color]
    base: Union[str, P.Color]
    bright_text: Union[str, P.Color]
    button: Union[str, P.Color]
    button_text: Union[str, P.Color]
    dark: Union[str, P.Color]
    highlight: Union[str, P.Color]
    highlighted_text: Union[str, P.Color]
    light: Union[str, P.Color]
    link: Union[str, P.Color]
    link_visited: Union[str, P.Color]
    mid: Union[str, P.Color]
    midlight: Union[str, P.Color]
    shadow: Union[str, P.Color]
    text: Union[str, P.Color]
    tool_tip_base: Union[str, P.Color]
    tool_tip_text: Union[str, P.Color]
    window: Union[str, P.Color]
    window_text: Union[str, P.Color]


class PsColumn(PsItem):
    add: P.Property
    bottom_padding: Union[float, P.Real]
    left_padding: Union[float, P.Real]
    move: P.Property
    padding: Union[float, P.Real]
    populate: P.Property
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_padding: Union[float, P.Real]


class PsContext2D(P.PropSheet):
    canvas: P.Property
    fill_rule: Union[int, P.Enumeration]
    fill_style: P.Property
    font: Union[str, P.String]
    global_alpha: Union[float, P.Real]
    global_composite_operation: Union[str, P.String]
    line_cap: Union[str, P.String]
    line_dash_offset: Union[float, P.Real]
    line_join: Union[str, P.String]
    line_width: Union[float, P.Real]
    miter_limit: Union[float, P.Real]
    shadow_blur: Union[float, P.Real]
    shadow_color: Union[str, P.String]
    shadow_offset_x: P.Property
    shadow_offset_y: P.Property
    stroke_style: P.Property
    text_align: Union[str, P.String]
    text_baseline: Union[str, P.String]


class PsDoubleValidator(P.PropSheet):
    bottom: Union[float, P.Real]
    decimals: Union[int, P.Int]
    locale: Union[str, P.String]
    notation: Union[int, P.Enumeration]
    top: Union[float, P.Real]


class PsDrag(P.PropSheet):
    pass


class PsDragEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    action: Union[int, P.Enumeration]
    color_data: Union[str, P.Color]
    formats: P.Property
    has_color: Union[bool, P.Bool]
    has_html: Union[bool, P.Bool]
    has_text: Union[bool, P.Bool]
    has_urls: Union[bool, P.Bool]
    html: Union[str, P.String]
    keys: P.Property
    proposed_action: P.Property
    supported_actions: P.Property
    text: Union[str, P.String]
    urls: P.Property
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsDragHandler(PsMultiPointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    parent: P.Property
    target: P.Property
    translation: P.Property
    x_axis: P.XAxis
    y_axis: P.YAxis


class PsDropArea(PsItem):
    contains_drag: Union[bool, P.Bool]
    drag: P.Drag
    keys: P.Property


class PsEnterKey(P.PropSheet):
    action_id: Union[int, P.Int]
    active: Union[bool, P.Bool]
    alternative_keys: P.Var
    display_text: Union[str, P.String]
    effective_alternative_keys: P.Var
    effective_alternative_keys_highlight_index: Union[int, P.Int]
    function_key: Union[bool, P.Bool]
    highlighted: Union[bool, P.Bool]
    key: Union[int, P.Int]
    key_panel_delegate: P.Property
    key_type: Union[int, P.Int]
    no_key_event: Union[bool, P.Bool]
    no_modifier: Union[bool, P.Bool]
    pressed: Union[bool, P.Bool]
    repeat: Union[bool, P.Bool]
    show_preview: Union[bool, P.Bool]
    small_text: Union[str, P.String]
    small_text_visible: Union[bool, P.Bool]
    sound_effect: Union[str, P.Url]
    text: Union[str, P.String]
    uppercased: Union[bool, P.Bool]
    weight: Union[float, P.Real]
    active_focus: Union[bool, P.Bool]
    active_focus_on_tab: Union[bool, P.Bool]
    anchors: P.Anchors
    antialiasing: Union[bool, P.Bool]
    baseline_offset: Union[int, P.Int]
    children: Union[list, P.List]
    children_rect: P.ChildrenRect
    clip: Union[bool, P.Bool]
    containment_mask: P.Property
    data: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    focus: Union[bool, P.Bool]
    height: Union[float, P.Real]
    implicit_height: Union[float, P.Real]
    implicit_width: Union[float, P.Real]
    opacity: Union[float, P.Real]
    palette: P.Property
    parent: P.Property
    resources: Union[list, P.List]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    smooth: Union[bool, P.Bool]
    state: Union[str, P.String]
    states: Union[list, P.List]
    transform: Union[list, P.List]
    transform_origin: Union[int, P.Enumeration]
    transitions: Union[list, P.List]
    visible: Union[bool, P.Bool]
    visible_children: Union[list, P.List]
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]
    z: Union[float, P.Real]
    object_name: Union[str, P.String]


class PsFlipable(PsItem):
    back: P.Property
    front: P.Property
    side: Union[int, P.Enumeration]


class PsFlow(PsItem):
    add: P.Property
    bottom_padding: Union[float, P.Real]
    effective_layout_direction: Union[int, P.Enumeration]
    flow: Union[int, P.Enumeration]
    layout_direction: Union[int, P.Enumeration]
    left_padding: Union[float, P.Real]
    move: P.Property
    padding: Union[float, P.Real]
    populate: P.Property
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_padding: Union[float, P.Real]


class PsFocusScope(PsItem):
    pass


class PsFontLoader(P.PropSheet):
    font: P.Font
    name_: Union[str, P.String]
    source: Union[str, P.Url]
    status: Union[int, P.Enumeration]


class PsFontMetrics(P.PropSheet):
    ascent: Union[float, P.Real]
    average_character_width: Union[float, P.Real]
    descent: Union[float, P.Real]
    font: P.Font
    height: Union[float, P.Real]
    leading: Union[float, P.Real]
    line_spacing: Union[float, P.Real]
    line_width: Union[float, P.Real]
    maximum_character_width: Union[float, P.Real]
    minimum_left_bearing: Union[float, P.Real]
    minimum_right_bearing: Union[float, P.Real]
    overline_position: Union[float, P.Real]
    strike_out_position: Union[float, P.Real]
    underline_position: Union[float, P.Real]
    x_height: Union[float, P.Real]


class PsGestureEvent(P.PropSheet):
    drag_threshold: Union[float, P.Real]
    touch_points: Union[list, P.List]


class PsGradientStop(P.PropSheet):
    color: Union[str, P.Color]
    position: Union[float, P.Real]


class PsGraphicsInfo(P.PropSheet):
    api: Union[int, P.Enumeration]
    major_version: Union[int, P.Int]
    minor_version: Union[int, P.Int]
    profile: Union[int, P.Enumeration]
    renderable_type: Union[int, P.Enumeration]
    shader_compilation_type: Union[int, P.Enumeration]
    shader_source_type: Union[int, P.Enumeration]
    shader_type: Union[int, P.Enumeration]


class PsGrid(PsItem):
    add: P.Property
    bottom_padding: Union[float, P.Real]
    column_spacing: P.Property
    columns: Union[int, P.Int]
    effective_horizontal_item_alignment: Union[int, P.Enumeration]
    effective_layout_direction: Union[int, P.Enumeration]
    flow: Union[int, P.Enumeration]
    horizontal_item_alignment: Union[int, P.Enumeration]
    layout_direction: Union[int, P.Enumeration]
    left_padding: Union[float, P.Real]
    move: P.Property
    padding: Union[float, P.Real]
    populate: P.Property
    right_padding: Union[float, P.Real]
    row_spacing: P.Property
    rows: Union[int, P.Int]
    spacing: P.Property
    top_padding: Union[float, P.Real]
    vertical_item_alignment: Union[int, P.Enumeration]


class PsGridMesh(P.PropSheet):
    resolution: P.Size


class PsGridView(PsFlickable):
    add: P.Property
    add_displaced: P.Property
    cache_buffer: Union[int, P.Int]
    cell_height: Union[float, P.Real]
    cell_width: Union[float, P.Real]
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property
    delegate: P.Property
    displaced: P.Property
    display_margin_beginning: Union[int, P.Int]
    display_margin_end: Union[int, P.Int]
    effective_layout_direction: Union[int, P.Enumeration]
    flow: Union[int, P.Enumeration]
    footer: P.Property
    footer_item: P.Property
    header: P.Property
    header_item: P.Property
    highlight: P.Property
    highlight_follows_current_item: Union[bool, P.Bool]
    highlight_item: P.Property
    highlight_move_duration: Union[int, P.Int]
    highlight_range_mode: Union[int, P.Enumeration]
    key_navigation_enabled: Union[bool, P.Bool]
    key_navigation_wraps: Union[bool, P.Bool]
    layout_direction: Union[int, P.Enumeration]
    model: P.Property
    move: P.Property
    move_displaced: P.Property
    populate: P.Property
    preferred_highlight_begin: Union[float, P.Real]
    preferred_highlight_end: Union[float, P.Real]
    remove: P.Property
    remove_displaced: P.Property
    snap_mode: Union[int, P.Enumeration]
    vertical_layout_direction: Union[int, P.Enumeration]


class PsHandlerPoint(P.PropSheet):
    ellipse_diameters: P.Size
    id: Union[int, P.Int]
    modifiers: Union[int, P.Enumeration]
    position: P.Property
    press_position: P.Property
    pressed_buttons: Union[int, P.Enumeration]
    pressure: P.Property
    rotation: P.Property
    scene_grab_position: P.Property
    scene_position: P.Property
    scene_press_position: P.Property
    unique_id: P.Property
    velocity: P.Property


class PsHoverHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    hovered: Union[bool, P.Bool]
    margin: Union[float, P.Real]
    parent: P.Property
    point: P.Property
    target: P.Property


class PsIntValidator(P.PropSheet):
    bottom: Union[int, P.Int]
    locale: Union[str, P.String]
    top: Union[int, P.Int]


class PsItemGrabResult(PsQtObject):
    image: P.Property
    url: Union[str, P.Url]


class PsKeyNavigation(P.PropSheet):
    pass


class PsKeys(P.PropSheet):
    enabled: Union[bool, P.Bool]
    forward_to: Union[list, P.List]
    priority: Union[int, P.Enumeration]


class PsLayoutMirroring(P.PropSheet):
    children_inherit: Union[bool, P.Bool]
    enabled: Union[bool, P.Bool]


class PsListView(PsFlickable):
    add: P.Property
    add_displaced: P.Property
    cache_buffer: Union[int, P.Int]
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property
    current_section: Union[str, P.String]
    delegate: P.Property
    displaced: P.Property
    display_margin_beginning: Union[int, P.Int]
    display_margin_end: Union[int, P.Int]
    effective_layout_direction: Union[int, P.Enumeration]
    footer: P.Property
    footer_item: P.Property
    footer_positioning: Union[int, P.Enumeration]
    header: P.Property
    header_item: P.Property
    header_positioning: Union[int, P.Enumeration]
    highlight: P.Property
    highlight_follows_current_item: Union[bool, P.Bool]
    highlight_item: P.Property
    highlight_move_duration: Union[int, P.Int]
    highlight_move_velocity: Union[float, P.Real]
    highlight_range_mode: Union[int, P.Enumeration]
    highlight_resize_duration: Union[int, P.Int]
    highlight_resize_velocity: Union[float, P.Real]
    key_navigation_enabled: Union[bool, P.Bool]
    key_navigation_wraps: Union[bool, P.Bool]
    layout_direction: Union[int, P.Enumeration]
    model: P.Property
    move: P.Property
    move_displaced: P.Property
    orientation: Union[int, P.Enumeration]
    populate: P.Property
    preferred_highlight_begin: Union[float, P.Real]
    preferred_highlight_end: Union[float, P.Real]
    remove: P.Property
    remove_displaced: P.Property
    reuse_items: Union[bool, P.Bool]
    section: P.Section
    snap_mode: Union[int, P.Enumeration]
    spacing: Union[float, P.Real]
    vertical_layout_direction: Union[int, P.Enumeration]


class PsMatrix4x4(P.PropSheet):
    matrix: P.Property


class PsMouseArea(PsItem):
    accepted_buttons: P.Property
    contains_mouse: Union[bool, P.Bool]
    contains_press: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag: P.Drag
    enabled: Union[bool, P.Bool]
    hover_enabled: Union[bool, P.Bool]
    mouse_x: Union[float, P.Real]
    mouse_y: Union[float, P.Real]
    press_and_hold_interval: Union[int, P.Int]
    pressed: Union[bool, P.Bool]
    pressed_buttons: P.Property
    prevent_stealing: Union[bool, P.Bool]
    propagate_composed_events: Union[bool, P.Bool]
    scroll_gesture_enabled: Union[bool, P.Bool]


class PsOpacityAnimator(PsAnimator):
    pass


class PsPalette(P.PropSheet):
    active: P.Property
    disabled: P.Property
    inactive: P.Property


class PsParallelAnimation(PsAnimation):
    pass


class PsParentAnimation(PsAnimation):
    new_parent: P.Property
    target: P.Property
    via: P.Property


class PsParentChange(P.PropSheet):
    height: Union[float, P.Real]
    parent: P.Property
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    target: P.Property
    width: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathAngleArc(P.PropSheet):
    center_x: Union[float, P.Real]
    center_y: Union[float, P.Real]
    move_to_start: Union[bool, P.Bool]
    radius_x: Union[float, P.Real]
    radius_y: Union[float, P.Real]
    start_angle: Union[float, P.Real]
    sweep_angle: Union[float, P.Real]


class PsPathAnimation(PsAnimation):
    anchor_point: P.Point
    duration: Union[int, P.Int]
    easing: P.Easing
    end_rotation: Union[float, P.Real]
    orientation: Union[int, P.Enumeration]
    orientation_entry_duration: Union[float, P.Real]
    orientation_exit_duration: Union[float, P.Real]
    path: P.Property
    target: P.Property


class PsPathArc(P.PropSheet):
    direction: Union[int, P.Enumeration]
    radius_x: Union[float, P.Real]
    radius_y: Union[float, P.Real]
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    use_large_arc: Union[bool, P.Bool]
    x: Union[float, P.Real]
    x_axis_rotation: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathAttribute(P.PropSheet):
    name_: Union[str, P.String]
    value: Union[float, P.Real]


class PsPathCubic(P.PropSheet):
    control1x: Union[float, P.Real]
    control1y: Union[float, P.Real]
    control2x: Union[float, P.Real]
    control2y: Union[float, P.Real]
    relative_control1x: Union[float, P.Real]
    relative_control1y: Union[float, P.Real]
    relative_control2x: Union[float, P.Real]
    relative_control2y: Union[float, P.Real]
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathCurve(P.PropSheet):
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathElement(P.PropSheet):
    pass


class PsPathInterpolator(P.PropSheet):
    angle: Union[float, P.Real]
    path: P.Property
    progress: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathLine(P.PropSheet):
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathMove(P.PropSheet):
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathMultiline(P.PropSheet):
    paths: Union[list, P.List]
    start: P.Point


class PsPathPercent(P.PropSheet):
    value: Union[float, P.Real]


class PsPathPolyline(P.PropSheet):
    path: Union[list, P.List]
    start: P.Point


class PsPathQuad(P.PropSheet):
    control_x: Union[float, P.Real]
    control_y: Union[float, P.Real]
    relative_control_x: Union[float, P.Real]
    relative_control_y: Union[float, P.Real]
    relative_x: Union[float, P.Real]
    relative_y: Union[float, P.Real]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathSvg(P.PropSheet):
    path: Union[str, P.String]


class PsPathText(P.PropSheet):
    text: Union[str, P.String]
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsPathView(PsItem):
    cache_item_count: Union[int, P.Int]
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]
    current_item: P.Property
    delegate: P.Property
    drag_margin: Union[float, P.Real]
    dragging: Union[bool, P.Bool]
    flick_deceleration: Union[float, P.Real]
    flicking: Union[bool, P.Bool]
    highlight: P.Property
    highlight_item: P.Property
    highlight_move_duration: Union[int, P.Int]
    highlight_range_mode: Union[int, P.Enumeration]
    interactive: Union[bool, P.Bool]
    maximum_flick_velocity: Union[float, P.Real]
    model: P.Property
    movement_direction: Union[int, P.Enumeration]
    moving: Union[bool, P.Bool]
    offset: Union[float, P.Real]
    path: P.Property
    path_item_count: Union[int, P.Int]
    preferred_highlight_begin: Union[float, P.Real]
    preferred_highlight_end: Union[float, P.Real]
    snap_mode: Union[int, P.Enumeration]


class PsPauseAnimation(PsAnimation):
    duration: Union[int, P.Int]


class PsPinchArea(PsItem):
    enabled: Union[bool, P.Bool]
    pinch: P.Pinch


class PsPinchEvent(P.PropSheet):
    accepted: Union[bool, P.Bool]
    angle: Union[float, P.Real]
    center: P.Property
    point1: P.Property
    point2: P.Property
    point_count: Union[int, P.Int]
    previous_angle: Union[float, P.Real]
    previous_center: P.Property
    previous_scale: Union[float, P.Real]
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    start_center: P.Property
    start_point1: P.Property
    start_point2: P.Property


class PsPinchHandler(PsMultiPointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    active_scale: Union[float, P.Real]
    centroid: P.Property
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    maximum_rotation: Union[float, P.Real]
    maximum_scale: Union[float, P.Real]
    minimum_rotation: Union[float, P.Real]
    minimum_scale: Union[float, P.Real]
    parent: P.Property
    rotation: Union[float, P.Real]
    scale: Union[float, P.Real]
    target: P.Property
    translation: P.Property
    x_axis: P.XAxis
    y_axis: P.YAxis


class PsPointHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    margin: Union[float, P.Real]
    parent: P.Property
    point: P.Property
    target: P.Property


class PsPositioner(P.PropSheet):
    pass


class PsPropertyAction(PsAnimation):
    exclude: Union[list, P.List]
    properties_: Union[str, P.String]
    property: Union[str, P.String]
    target: P.Property
    targets: Union[list, P.List]
    value: P.Property


class PsPropertyChanges(P.PropSheet):
    explicit: Union[bool, P.Bool]
    restore_entry_values: Union[bool, P.Bool]
    target: P.Property


class PsRegularExpressionValidator(P.PropSheet):
    regular_expression: P.Property


class PsRepeater(PsItem):
    count: Union[int, P.Int]
    delegate: P.Property
    model: P.Property


class PsRotation(P.PropSheet):
    angle: Union[float, P.Real]
    axis: P.Axis
    origin: P.Origin


class PsRotationAnimation(PsPropertyAnimation):
    direction: Union[int, P.Enumeration]
    from_: Union[float, P.Real]
    to: Union[float, P.Real]


class PsRotationAnimator(PsAnimator):
    direction: Union[int, P.Enumeration]


class PsRow(PsItem):
    add: P.Property
    bottom_padding: Union[float, P.Real]
    effective_layout_direction: Union[int, P.Enumeration]
    layout_direction: Union[int, P.Enumeration]
    left_padding: Union[float, P.Real]
    move: P.Property
    padding: Union[float, P.Real]
    populate: P.Property
    right_padding: Union[float, P.Real]
    spacing: Union[float, P.Real]
    top_padding: Union[float, P.Real]


class PsScale(P.PropSheet):
    origin: P.Origin
    x_scale: Union[float, P.Real]
    y_scale: Union[float, P.Real]


class PsScaleAnimator(PsAnimator):
    pass


class PsScriptAction(PsAnimation):
    script: P.Property
    script_name: Union[str, P.String]


class PsSequentialAnimation(PsAnimation):
    pass


class PsShaderEffect(PsItem):
    blending: Union[bool, P.Bool]
    cull_mode: Union[int, P.Enumeration]
    fragment_shader: Union[str, P.Url]
    log: Union[str, P.String]
    mesh: P.Property
    status: Union[int, P.Enumeration]
    supports_atlas_textures: Union[bool, P.Bool]
    vertex_shader: Union[str, P.Url]


class PsShaderEffectSource(PsItem):
    format: Union[int, P.Enumeration]
    hide_source: Union[bool, P.Bool]
    live: Union[bool, P.Bool]
    mipmap: Union[bool, P.Bool]
    recursive: Union[bool, P.Bool]
    samples: Union[int, P.Int]
    source_item: P.Property
    source_rect: P.Rect
    texture_mirroring: Union[int, P.Enumeration]
    texture_size: P.Size
    wrap_mode: Union[int, P.Enumeration]


class PsShortcut(P.PropSheet):
    auto_repeat: Union[bool, P.Bool]
    context: Union[int, P.Enumeration]
    enabled: Union[bool, P.Bool]
    native_text: Union[str, P.String]
    portable_text: Union[str, P.String]
    sequence: P.Property
    sequences: Union[list, P.List]


class PsSmoothedAnimation(PsNumberAnimation):
    duration: Union[int, P.Int]
    maximum_easing_time: Union[int, P.Int]
    reversing_mode: Union[int, P.Enumeration]
    velocity: Union[float, P.Real]


class PsSpringAnimation(PsNumberAnimation):
    damping: Union[float, P.Real]
    epsilon: Union[float, P.Real]
    mass: Union[float, P.Real]
    modulus: Union[float, P.Real]
    spring: Union[float, P.Real]
    velocity: Union[float, P.Real]


class PsSprite(P.PropSheet):
    duration: Union[int, P.Int]
    duration_variation: Union[int, P.Int]
    frame_count: Union[int, P.Int]
    frame_duration: Union[int, P.Int]
    frame_duration_variation: Union[int, P.Int]
    frame_height: Union[int, P.Int]
    frame_rate: P.Property
    frame_rate_variation: P.Property
    frame_sync: Union[bool, P.Bool]
    frame_width: Union[int, P.Int]
    frame_x: Union[int, P.Int]
    frame_y: Union[int, P.Int]
    name_: Union[str, P.String]
    random_start: Union[bool, P.Bool]
    reverse: Union[bool, P.Bool]
    source: Union[str, P.Url]
    to: P.Property


class PsSpriteSequence(PsItem):
    current_sprite: Union[str, P.String]
    goal_sprite: Union[str, P.String]
    interpolate: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    sprites: Union[list, P.List]


class PsState(P.PropSheet):
    changes: Union[list, P.List]
    extend: Union[str, P.String]
    name_: Union[str, P.String]
    when: Union[bool, P.Bool]


class PsStateChangeScript(P.PropSheet):
    name_: Union[str, P.String]
    script: P.Property


class PsStateGroup(P.PropSheet):
    state: Union[str, P.String]
    states: Union[list, P.List]
    transitions: Union[list, P.List]


class PsSystemPalette(P.PropSheet):
    alternate_base: Union[str, P.Color]
    base: Union[str, P.Color]
    button: Union[str, P.Color]
    button_text: Union[str, P.Color]
    color_group: Union[int, P.Enumeration]
    dark: Union[str, P.Color]
    highlight: Union[str, P.Color]
    highlighted_text: Union[str, P.Color]
    light: Union[str, P.Color]
    mid: Union[str, P.Color]
    midlight: Union[str, P.Color]
    shadow: Union[str, P.Color]
    text: Union[str, P.Color]
    window: Union[str, P.Color]
    window_text: Union[str, P.Color]


class PsTapHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    gesture_policy: Union[int, P.Enumeration]
    grab_permissions: P.Property
    long_press_threshold: Union[float, P.Real]
    margin: Union[float, P.Real]
    parent: P.Property
    point: P.Property
    pressed: Union[bool, P.Bool]
    tap_count: Union[int, P.Int]
    target: P.Property
    time_held: Union[float, P.Real]


class PsTextMetrics(P.PropSheet):
    advance_width: Union[float, P.Real]
    bounding_rect: P.Rect
    elide: Union[int, P.Enumeration]
    elide_width: Union[float, P.Real]
    elided_text: Union[str, P.String]
    font: P.Font
    height: Union[float, P.Real]
    text: Union[str, P.String]
    tight_bounding_rect: P.Rect
    width: Union[float, P.Real]


class PsTouchPoint(P.PropSheet):
    ellipse_diameters: P.Size
    point_id: Union[int, P.Int]
    pressed: Union[bool, P.Bool]
    pressure: Union[float, P.Real]
    previous_x: Union[float, P.Real]
    previous_y: Union[float, P.Real]
    rotation: Union[float, P.Real]
    scene_x: Union[float, P.Real]
    scene_y: Union[float, P.Real]
    start_x: Union[float, P.Real]
    start_y: Union[float, P.Real]
    unique_id: P.Property
    velocity: P.Vector2D
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsTransition(P.PropSheet):
    animations: Union[list, P.List]
    enabled: Union[bool, P.Bool]
    from_: Union[str, P.String]
    reversible: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    to: Union[str, P.String]


class PsTranslate(P.PropSheet):
    x: Union[float, P.Real]
    y: Union[float, P.Real]


class PsUniformAnimator(PsAnimator):
    uniform: Union[str, P.String]


class PsVector3dAnimation(PsPropertyAnimation):
    from_: P.Vector3D
    to: P.Vector3D


class PsViewTransition(P.PropSheet):
    pass


class PsWheelHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active: Union[bool, P.Bool]
    active_timeout: Union[float, P.Real]
    cursor_shape: P.Property
    drag_threshold: Union[int, P.Int]
    enabled: Union[bool, P.Bool]
    grab_permissions: P.Property
    invertible: Union[bool, P.Bool]
    margin: Union[float, P.Real]
    orientation: P.Property
    parent: P.Property
    point: P.Property
    property: Union[str, P.String]
    rotation: Union[float, P.Real]
    rotation_scale: Union[float, P.Real]
    target: P.Property
    target_scale_multiplier: Union[float, P.Real]
    target_transform_around_cursor: Union[bool, P.Bool]


class PsXAnimator(PsAnimator):
    pass


class PsYAnimator(PsAnimator):
    pass


class PsAge(PsAffector):
    advance_position: Union[bool, P.Bool]
    life_left: Union[int, P.Int]


class PsAngleDirection(PsDirection):
    angle: Union[float, P.Real]
    angle_variation: Union[float, P.Real]
    magnitude: Union[float, P.Real]
    magnitude_variation: Union[float, P.Real]


class PsAttractor(PsAffector):
    affected_parameter: P.Property
    proportional_to_distance: P.Property


class PsCumulativeDirection(PsDirection):
    pass


class PsEllipseShape(PsShape):
    fill: Union[bool, P.Bool]


class PsEmitter(P.PropSheet):
    acceleration: P.Property
    emit_rate: Union[float, P.Real]
    enabled: Union[bool, P.Bool]
    end_size: Union[float, P.Real]
    group: Union[str, P.String]
    life_span: Union[int, P.Int]
    life_span_variation: Union[int, P.Int]
    maximum_emitted: Union[int, P.Int]
    shape: P.Property
    size: Union[float, P.Real]
    size_variation: Union[float, P.Real]
    start_time: Union[int, P.Int]
    system: P.Property
    velocity: P.Property
    velocity_from_movement: P.Property


class PsFriction(PsAffector):
    factor: Union[float, P.Real]
    threshold: Union[float, P.Real]


class PsGravity(PsAffector):
    angle: Union[float, P.Real]
    magnitude: Union[float, P.Real]


class PsGroupGoal(PsAffector):
    goal_state: Union[str, P.String]
    jump: Union[bool, P.Bool]


class PsImageParticle(PsParticlePainter):
    alpha: Union[float, P.Real]
    alpha_variation: Union[float, P.Real]
    auto_rotation: Union[bool, P.Bool]
    blue_variation: Union[float, P.Real]
    color: Union[str, P.Color]
    color_table: Union[str, P.Url]
    color_variation: Union[float, P.Real]
    entry_effect: P.Property
    green_variation: Union[float, P.Real]
    opacity_table: Union[str, P.Url]
    red_variation: Union[float, P.Real]
    rotation: Union[float, P.Real]
    rotation_variation: Union[float, P.Real]
    rotation_velocity: Union[float, P.Real]
    rotation_velocity_variation: Union[float, P.Real]
    size_table: Union[str, P.Url]
    source: Union[str, P.Url]
    sprites: Union[list, P.List]
    sprites_interpolate: Union[bool, P.Bool]
    status: P.Property
    x_vector: P.Property
    y_vector: P.Property


class PsItemParticle(PsParticlePainter):
    delegate: P.Property
    fade: Union[bool, P.Bool]


class PsLineShape(PsShape):
    mirrored: Union[bool, P.Bool]


class PsMaskShape(PsShape):
    source: Union[str, P.Url]


class PsParticle(P.PropSheet):
    alpha: Union[float, P.Real]
    auto_rotate: Union[bool, P.Bool]
    ax: Union[float, P.Real]
    ay: Union[float, P.Real]
    blue: Union[float, P.Real]
    current_size: Union[float, P.Real]
    end_size: Union[float, P.Real]
    green: Union[float, P.Real]
    initial_ax: Union[float, P.Real]
    initial_ay: Union[float, P.Real]
    initial_vx: Union[float, P.Real]
    initial_vy: Union[float, P.Real]
    initial_x: Union[float, P.Real]
    initial_y: Union[float, P.Real]
    life_left: Union[float, P.Real]
    life_span: Union[float, P.Real]
    red: Union[float, P.Real]
    rotation: Union[float, P.Real]
    rotation_velocity: Union[float, P.Real]
    start_size: Union[float, P.Real]
    t: Union[float, P.Real]
    update: Union[bool, P.Bool]
    vx: Union[float, P.Real]
    vy: Union[float, P.Real]
    x: Union[float, P.Real]
    x_deformation_vector_x: Union[float, P.Real]
    x_deformation_vector_y: Union[float, P.Real]
    y: Union[float, P.Real]
    y_deformation_vector_x: Union[float, P.Real]
    y_deformation_vector_y: Union[float, P.Real]


class PsParticleExtruder(P.PropSheet):
    pass


class PsParticleGroup(P.PropSheet):
    duration: Union[int, P.Int]
    duration_variation: P.Property
    name_: Union[str, P.String]
    system: P.Property
    to: P.Property


class PsParticleSystem(P.PropSheet):
    empty: Union[bool, P.Bool]
    particle_states: Union[list, P.List]
    paused: Union[bool, P.Bool]
    running: Union[bool, P.Bool]


class PsPointDirection(PsDirection):
    x: Union[float, P.Real]
    x_variation: Union[float, P.Real]
    y: Union[float, P.Real]
    y_variation: Union[float, P.Real]


class PsRectangleShape(P.PropSheet):
    pass


class PsSpriteGoal(PsAffector):
    goal_state: Union[str, P.String]
    jump: Union[bool, P.Bool]
    system_states: Union[bool, P.Bool]


class PsTargetDirection(PsDirection):
    magnitude: Union[float, P.Real]
    magnitude_variation: Union[float, P.Real]
    proportional_magnitude: Union[bool, P.Bool]
    target_item: P.Property
    target_variation: Union[float, P.Real]
    target_x: Union[float, P.Real]
    target_y: Union[float, P.Real]


class PsTrailEmitter(P.PropSheet):
    emit_height: Union[float, P.Real]
    emit_rate_per_particle: Union[float, P.Real]
    emit_shape: P.Property
    emit_width: Union[float, P.Real]
    follow: Union[str, P.String]
    velocity_from_movement: P.Property


class PsTurbulence(PsAffector):
    noise_source: Union[str, P.Url]
    strength: Union[float, P.Real]


class PsWander(PsAffector):
    affected_parameter: P.Property
    pace: Union[float, P.Real]
    x_variance: Union[float, P.Real]
    y_variance: Union[float, P.Real]


class PsBoundaryRule(P.PropSheet):
    current_overshoot: P.Property
    easing: P.Property
    enabled: Union[bool, P.Bool]
    maximum: P.Property
    maximum_overshoot: P.Property
    minimum: P.Property
    minimum_overshoot: P.Property
    overshoot_filter: P.Property
    overshoot_scale: P.Property
    peak_overshoot: P.Property
    return_duration: Union[int, P.Int]


class PsGridLayout(PsItem):
    column_spacing: Union[float, P.Real]
    columns: Union[int, P.Int]
    flow: Union[int, P.Enumeration]
    layout_direction: Union[int, P.Enumeration]
    row_spacing: Union[float, P.Real]
    rows: Union[int, P.Int]


class PsLayout(P.PropSheet):
    pass


class PsStackLayout(PsItem):
    count: Union[int, P.Int]
    current_index: Union[int, P.Int]


class PsConicalGradient(PsShapeGradient):
    angle: Union[float, P.Real]
    center_x: Union[float, P.Real]
    center_y: Union[float, P.Real]


class PsLinearGradient(PsShapeGradient):
    x1: Union[float, P.Real]
    x2: Union[float, P.Real]
    y1: Union[float, P.Real]
    y2: Union[float, P.Real]


class PsRadialGradient(PsShapeGradient):
    center_radius: Union[float, P.Real]
    center_x: Union[float, P.Real]
    center_y: Union[float, P.Real]
    focal_radius: Union[float, P.Real]
    focal_x: Union[float, P.Real]
    focal_y: Union[float, P.Real]


class PsShapePath(PsPath):
    cap_style: Union[int, P.Enumeration]
    dash_offset: Union[float, P.Real]
    dash_pattern: Union[list, P.List]
    fill_color: Union[str, P.Color]
    fill_gradient: P.Property
    fill_rule: Union[int, P.Enumeration]
    join_style: Union[int, P.Enumeration]
    miter_limit: Union[int, P.Int]
    stroke_color: Union[str, P.Color]
    stroke_style: Union[int, P.Enumeration]
    stroke_width: Union[float, P.Real]


class PsFolderListModel(P.PropSheet):
    case_sensitive: Union[bool, P.Bool]
    count: Union[int, P.Int]
    folder: Union[str, P.Url]
    name_filters: Union[list, P.List]
    parent_folder: Union[str, P.Url]
    root_folder: Union[str, P.Url]
    show_dirs: Union[bool, P.Bool]
    show_dirs_first: Union[bool, P.Bool]
    show_dot_and_dot_dot: Union[bool, P.Bool]
    show_files: Union[bool, P.Bool]
    show_hidden: Union[bool, P.Bool]
    show_only_readable: Union[bool, P.Bool]
    sort_case_sensitive: Union[bool, P.Bool]
    sort_field: Union[int, P.Enumeration]
    sort_reversed: Union[bool, P.Bool]
    status: Union[int, P.Enumeration]


class PsSettings(P.PropSheet):
    category: Union[str, P.String]
    file_name: Union[str, P.String]


class PsWavefrontMesh(P.PropSheet):
    last_error: Union[int, P.Enumeration]
    projection_plane_v: P.Vector3D
    projection_plane_w: P.Vector3D
    source: Union[str, P.Url]


class PsAdditiveColorGradient(P.PropSheet):
    bottom_color: P.Vector3D
    top_color: P.Vector3D


class PsBlur(P.PropSheet):
    amount: Union[float, P.Real]


class PsBrushStrokes(P.PropSheet):
    brush_angle: Union[float, P.Real]
    brush_length: Union[float, P.Real]
    brush_size: Union[float, P.Real]
    noise_sample: P.Property


class PsChromaticAberration(P.PropSheet):
    aberration_amount: Union[float, P.Real]
    focus_depth: Union[float, P.Real]
    mask_texture: P.Property


class PsColorMaster(P.PropSheet):
    blue_strength: Union[float, P.Real]
    green_strength: Union[float, P.Real]
    red_strength: Union[float, P.Real]
    saturation: Union[float, P.Real]


class PsDepthOfFieldHQBlur(P.PropSheet):
    blur_amount: Union[float, P.Real]
    focus_distance: Union[float, P.Real]
    focus_range: Union[float, P.Real]


class PsDesaturate(P.PropSheet):
    amount: Union[float, P.Real]


class PsDistortionRipple(P.PropSheet):
    center: P.Vector2D
    distortion_height: Union[float, P.Real]
    distortion_phase: Union[float, P.Real]
    distortion_width: Union[float, P.Real]
    radius: Union[float, P.Real]


class PsDistortionSphere(P.PropSheet):
    center: P.Vector2D
    distortion_height: Union[float, P.Real]
    radius: Union[float, P.Real]


class PsDistortionSpiral(P.PropSheet):
    center: P.Vector2D
    distortion_strength: Union[float, P.Real]
    radius: Union[float, P.Real]


class PsEdgeDetect(P.PropSheet):
    edge_strength: Union[float, P.Real]


class PsEmboss(P.PropSheet):
    amount: Union[float, P.Real]


class PsFlip(P.PropSheet):
    flip_horizontally: Union[bool, P.Bool]
    flip_vertically: Union[bool, P.Bool]


class PsFxaa(P.PropSheet):
    pass


class PsGaussianBlur(P.PropSheet):
    amount: Union[float, P.Real]


class PsHDRBloomTonemap(P.PropSheet):
    bloom_threshold: Union[float, P.Real]
    blur_falloff: Union[float, P.Real]
    channel_threshold: Union[float, P.Real]
    exposure: Union[float, P.Real]
    gamma: Union[float, P.Real]
    tonemapping_lerp: Union[float, P.Real]


class PsMotionBlur(P.PropSheet):
    blur_quality: Union[float, P.Real]
    fade_amount: Union[float, P.Real]


class PsScatter(P.PropSheet):
    amount: Union[float, P.Real]
    direction: Union[int, P.Int]
    noise_sample: P.Property
    randomize: Union[bool, P.Bool]


class PsSCurveTonemap(P.PropSheet):
    contrast_boost: Union[float, P.Real]
    exposure_value: Union[float, P.Real]
    gamma_value: Union[float, P.Real]
    saturation_level: Union[float, P.Real]
    shoulder_emphasis: Union[float, P.Real]
    shoulder_slope: Union[float, P.Real]
    toe_emphasis: Union[float, P.Real]
    toe_slope: Union[float, P.Real]
    use_exposure: Union[bool, P.Bool]
    white_point: Union[float, P.Real]


class PsTiltShift(P.PropSheet):
    blur_amount: Union[float, P.Real]
    focus_position: Union[float, P.Real]
    focus_width: Union[float, P.Real]
    is_inverted: Union[bool, P.Bool]
    is_vertical: Union[bool, P.Bool]


class PsVignette(P.PropSheet):
    vignette_color: P.Vector3D
    vignette_radius: Union[float, P.Real]
    vignette_strength: Union[float, P.Real]


class PsAttractor3D(PsAffector3D):
    duration: Union[int, P.Int]
    duration_variation: Union[int, P.Int]
    hide_at_end: Union[bool, P.Bool]
    position_variation: P.Vector3D
    shape: P.Property


class PsEmitBurst3D(PsQtObject):
    amount: Union[int, P.Int]
    duration: Union[int, P.Int]
    time: Union[int, P.Int]


class PsGravity3D(PsAffector3D):
    direction: P.Vector3D
    magnitude: Union[float, P.Real]


class PsModelParticle3D(PsParticle3D):
    delegate: P.Property


class PsParticleShape3D(PsQtObject):
    shape_type: Union[int, P.Enumeration]
    extents: P.Vector3D
    fill: Union[bool, P.Bool]
    type: P.Property


class PsParticleSystem3D(PsNode):
    logging: Union[bool, P.Bool]
    logging_data: P.Property
    paused: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    seed: Union[int, P.Int]
    start_time: Union[int, P.Int]
    time: Union[int, P.Int]
    use_random_seed: Union[bool, P.Bool]


class PsParticleSystem3DLogging(PsQtObject):
    logging_interval: Union[int, P.Int]
    particles_max: Union[int, P.Int]
    particles_used: Union[int, P.Int]
    time: Union[float, P.Real]
    time_average: Union[float, P.Real]
    updates: Union[int, P.Int]


class PsPointRotator3D(PsAffector3D):
    direction: P.Vector3D
    magnitude: Union[float, P.Real]
    pivot_point: P.Vector3D


class PsSpriteParticle3D(PsParticle3D):
    blend_mode: Union[int, P.Enumeration]
    billboard: Union[bool, P.Bool]
    blend_mode: P.Property
    color_table: P.Property
    frame_count: Union[int, P.Int]
    interpolate: Union[bool, P.Bool]
    particle_scale: Union[float, P.Real]
    sprite: P.Property


class PsTargetDirection3D(PsDirection3D):
    magnitude: Union[float, P.Real]
    magnitude_variation: Union[float, P.Real]
    normalized: Union[bool, P.Bool]
    position: P.Vector3D
    position_variation: P.Vector3D


class PsTrailEmitter3D(PsParticleEmitter3D):
    follow: P.Property


class PsVectorDirection3D(PsDirection3D):
    direction: P.Vector3D
    direction_variation: P.Vector3D


class PsWander3D(PsAffector3D):
    global_amount: P.Vector3D
    global_pace: P.Vector3D
    global_pace_start: P.Vector3D
    unique_amount: P.Vector3D
    unique_amount_variation: Union[float, P.Real]
    unique_pace: P.Vector3D
    unique_pace_variation: Union[float, P.Real]


class PsAxisHelper(PsNode):
    enable_axis_lines: Union[bool, P.Bool]
    enable_xy_grid: Union[bool, P.Bool]
    enable_xz_grid: Union[bool, P.Bool]
    enable_yz_grid: Union[bool, P.Bool]
    grid_color: Union[str, P.Color]
    grid_opacity: Union[float, P.Real]


class PsDebugView(PsRectangle):
    source: P.Var


class PsGridGeometry(PsGeometry):
    horizontal_lines: Union[int, P.Int]
    horizontal_step: Union[float, P.Real]
    vertical_lines: Union[int, P.Int]
    vertical_step: Union[float, P.Real]


class PsInstanceRange(PsObject3D):
    from_: P.Property
    proportional: Union[bool, P.Bool]
    to: P.Property


class PsRandomInstancing(PsInstancing):
    color: P.Property
    custom_data: P.Property
    instance_count: Union[int, P.Int]
    position: P.Property
    random_seed: Union[int, P.Int]
    rotation: P.Property
    scale: P.Property


class PsWasdController(PsItem):
    accepted_buttons: Union[int, P.Enumeration]
    back_speed: Union[float, P.Real]
    controlled_object: P.Property
    down_speed: Union[float, P.Real]
    forward_speed: Union[float, P.Real]
    inputs_need_processing: Union[bool, P.Bool]
    keys_enabled: Union[bool, P.Bool]
    left_speed: Union[float, P.Real]
    mouse_enabled: Union[bool, P.Bool]
    right_speed: Union[float, P.Real]
    shift_speed: Union[float, P.Real]
    speed: Union[float, P.Real]
    up_speed: Union[float, P.Real]
    x_invert: Union[bool, P.Bool]
    x_speed: Union[float, P.Real]
    y_invert: Union[bool, P.Bool]
    y_speed: Union[float, P.Real]


class PsBounds(P.PropSheet):
    maximum: P.Vector3D
    minimum: P.Vector3D


class PsBufferInput(PsCommand):
    buffer: P.Property
    sampler: Union[str, P.String]


class PsCustomCamera(PsCamera):
    projection: P.Matrix4x4


class PsCustomMaterial(PsMaterial):
    always_dirty: Union[bool, P.Bool]
    destination_blend: Union[int, P.Enumeration]
    fragment_shader: Union[str, P.Url]
    line_width: Union[float, P.Real]
    shading_mode: Union[int, P.Enumeration]
    source_blend: Union[int, P.Enumeration]
    vertex_shader: Union[str, P.Url]


class PsDefaultMaterial(PsMaterial):
    blend_mode: Union[int, P.Enumeration]
    bump_amount: Union[float, P.Real]
    bump_map: P.Property
    diffuse_color: Union[str, P.Color]
    diffuse_light_wrap: Union[float, P.Real]
    diffuse_map: P.Property
    emissive_color: Union[str, P.Color]
    emissive_factor: Union[float, P.Real]
    emissive_map: P.Property
    fresnel_power: Union[float, P.Real]
    index_of_refraction: Union[float, P.Real]
    lighting: Union[int, P.Enumeration]
    line_width: Union[float, P.Real]
    normal_map: P.Property
    opacity: Union[float, P.Real]
    opacity_channel: Union[int, P.Enumeration]
    opacity_map: P.Property
    point_size: Union[float, P.Real]
    roughness_channel: Union[int, P.Enumeration]
    roughness_map: P.Property
    specular_amount: Union[float, P.Real]
    specular_map: P.Property
    specular_model: Union[int, P.Enumeration]
    specular_reflection_map: P.Property
    specular_roughness: Union[float, P.Real]
    specular_tint: Union[str, P.Color]
    translucency_channel: Union[int, P.Enumeration]
    translucency_map: P.Property
    translucent_falloff: Union[float, P.Real]
    vertex_colors_enabled: Union[bool, P.Bool]


class PsFrustumCamera(PsPerspectiveCamera):
    bottom: Union[float, P.Real]
    left: Union[float, P.Real]
    right: Union[float, P.Real]
    top: Union[float, P.Real]


class PsInstanceList(PsInstancing):
    instances: Union[list, P.List]


class PsInstanceListEntry(PsObject3D):
    color: P.Vector3D
    custom_data: P.Vector3D
    euler_rotation: P.Vector3D
    position: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D


class PsLoader3D(PsNode):
    active: Union[bool, P.Bool]
    asynchronous: Union[bool, P.Bool]
    item: P.Property
    progress: Union[float, P.Real]
    source: Union[str, P.Url]
    source_component: P.Property
    status: Union[int, P.Enumeration]


class PsModel(PsNode):
    bounds: P.Property
    casts_shadows: Union[bool, P.Bool]
    geometry: P.Property
    instance_root: P.Property
    instancing: P.Property
    inverse_bind_poses: Union[list, P.List]
    materials: Union[list, P.List]
    morph_targets: Union[list, P.List]
    pickable: Union[bool, P.Bool]
    receives_shadows: Union[bool, P.Bool]
    skeleton: P.Property
    source: Union[str, P.Url]


class PsOrthographicCamera(PsCamera):
    clip_far: Union[float, P.Real]
    clip_near: Union[float, P.Real]
    horizontal_magnification: Union[float, P.Real]
    vertical_magnification: Union[float, P.Real]


class PsPass(P.PropSheet):
    commands: Union[list, P.List]
    output: P.Property
    shaders: Union[list, P.List]


class PsPickResult(P.PropSheet):
    distance: Union[float, P.Number]
    object_hit: P.Property
    scene_position: P.Vector3D
    uv_position: P.Vector2D


class PsPrincipledMaterial(PsMaterial):
    alpha_cutoff: Union[float, P.Real]
    alpha_mode: Union[int, P.Enumeration]
    base_color: Union[str, P.Color]
    base_color_map: P.Property
    blend_mode: Union[int, P.Enumeration]
    emissive_color: Union[str, P.Color]
    emissive_map: P.Property
    lighting: Union[int, P.Enumeration]
    line_width: Union[float, P.Real]
    metalness: Union[float, P.Real]
    metalness_channel: Union[int, P.Enumeration]
    metalness_map: P.Property
    normal_map: P.Property
    normal_strength: Union[float, P.Real]
    occlusion_amount: Union[float, P.Real]
    occlusion_channel: Union[int, P.Enumeration]
    occlusion_map: P.Property
    opacity: Union[float, P.Real]
    opacity_channel: Union[int, P.Enumeration]
    opacity_map: P.Property
    point_size: Union[float, P.Real]
    roughness: Union[float, P.Real]
    roughness_channel: Union[int, P.Enumeration]
    roughness_map: P.Property
    specular_amount: Union[float, P.Real]
    specular_map: P.Property
    specular_reflection_map: P.Property
    specular_tint: Union[float, P.Real]


class PsRenderStats(P.PropSheet):
    fps: Union[int, P.Int]
    frame_time: Union[float, P.Number]
    max_frame_time: Union[float, P.Number]
    render_prepare_time: Union[float, P.Number]
    render_time: Union[float, P.Number]
    sync_time: Union[float, P.Number]


class PsRepeater3D(PsNode):
    count: Union[int, P.Int]
    delegate: P.Property
    model: P.Property


class PsSceneEnvironment(PsObject3D):
    antialiasing_mode: Union[int, P.Enumeration]
    antialiasing_quality: Union[int, P.Enumeration]
    ao_bias: Union[float, P.Number]
    ao_distance: Union[float, P.Number]
    ao_dither: Union[bool, P.Bool]
    ao_sample_rate: Union[int, P.Int]
    ao_softness: Union[float, P.Number]
    ao_strength: Union[float, P.Number]
    background_mode: Union[int, P.Enumeration]
    clear_color: Union[str, P.Color]
    depth_pre_pass_enabled: Union[bool, P.Bool]
    depth_test_enabled: Union[bool, P.Bool]
    effects: Union[list, P.List]
    light_probe: P.Property
    probe_exposure: Union[float, P.Number]
    probe_horizon: Union[float, P.Number]
    probe_orientation: P.Vector3D
    temporal_aa_enabled: Union[bool, P.Bool]
    temporal_aa_strength: Union[float, P.Number]
    tonemap_mode: Union[int, P.Enumeration]


class PsSetUniformValue(PsCommand):
    target: Union[str, P.String]
    value: P.Property


class PsShader(P.PropSheet):
    shader: Union[str, P.Url]
    stage: Union[int, P.Enumeration]


class PsTexture(PsObject3D):
    flip_v: Union[bool, P.Bool]
    generate_mipmaps: Union[bool, P.Bool]
    index_uv: Union[int, P.Int]
    mag_filter: Union[int, P.Enumeration]
    mapping_mode: Union[int, P.Enumeration]
    min_filter: Union[int, P.Enumeration]
    mip_filter: Union[int, P.Enumeration]
    pivot_u: Union[float, P.Number]
    pivot_v: Union[float, P.Number]
    position_u: Union[float, P.Number]
    position_v: Union[float, P.Number]
    rotation_uv: Union[float, P.Number]
    scale_u: Union[float, P.Number]
    scale_v: Union[float, P.Number]
    source: Union[str, P.Url]
    source_item: P.Property
    texture_data: P.Property
    tiling_mode_horizontal: Union[int, P.Enumeration]
    tiling_mode_vertical: Union[int, P.Enumeration]


class PsTextureData(PsObject3D):
    pass


class PsTextureInput(P.PropSheet):
    enabled: Union[bool, P.Bool]
    texture: P.Property


class PsView3D(P.PropSheet):
    camera: P.Property
    environment: P.Property
    import_scene: P.Property
    render_mode: Union[int, P.Enumeration]
    render_stats: P.Property
    scene: P.Property


class PsBackspaceKey(PsBaseKey):
    pass


class PsChangeLanguageKey(PsBaseKey):
    custom_layouts_only: Union[bool, P.Bool]


class PsEnterKeyAction(P.PropSheet):
    pass


class PsFillerKey(PsBaseKey):
    pass


class PsFlickKey(PsKey):
    pass


class PsHandwritingInputPanel(PsItem):
    active: Union[bool, P.Bool]
    available: Union[bool, P.Bool]
    input_panel: P.Var


class PsHandwritingModeKey(PsKey):
    pass


class PsHideKeyboardKey(PsBaseKey):
    pass


class PsInputContext(P.PropSheet):
    anchor_position: Union[int, P.Int]
    anchor_rect_intersects_clip_rect: Union[bool, P.Bool]
    anchor_rectangle: P.Rect
    animating: Union[bool, P.Bool]
    caps_lock_active: Union[bool, P.Bool]
    cursor_position: Union[int, P.Int]
    cursor_rect_intersects_clip_rect: Union[bool, P.Bool]
    cursor_rectangle: P.Rect
    input_engine: P.Property
    input_method_hints: Union[int, P.Int]
    keyboard_observer: P.Property
    locale: Union[str, P.String]
    preedit_text: Union[str, P.String]
    selected_text: Union[str, P.String]
    selection_control_visible: Union[bool, P.Bool]
    shift_active: Union[bool, P.Bool]
    surrounding_text: Union[str, P.String]
    uppercase: Union[bool, P.Bool]


class PsInputEngine(P.PropSheet):
    active_key: Union[int, P.Int]
    input_method: P.Property
    input_mode: Union[int, P.Int]
    input_modes: Union[list, P.List]
    pattern_recognition_modes: Union[list, P.List]
    previous_key: Union[int, P.Int]
    word_candidate_list_model: P.Property
    word_candidate_list_visible_hint: Union[bool, P.Bool]


class PsInputMethod(P.PropSheet):
    input_context: P.Property
    input_engine: P.Property


class PsInputModeKey(PsKey):
    input_mode_count: Union[int, P.Int]
    input_mode_name_list: P.Var
    input_modes: P.Var


class PsInputPanel(PsItem):
    active: Union[bool, P.Bool]
    external_language_switch_enabled: Union[bool, P.Bool]


class PsKeyboardColumn(PsColumnLayout):
    key_weight: Union[float, P.Real]
    small_text_visible: Union[bool, P.Bool]


class PsKeyboardLayout(PsColumnLayout):
    input_method: P.Var
    input_mode: Union[int, P.Int]
    key_weight: Union[float, P.Real]
    shared_layouts: P.Var
    small_text_visible: Union[bool, P.Bool]


class PsKeyboardLayoutLoader(PsLoader):
    input_method: P.Var
    input_mode: Union[int, P.Int]
    shared_layouts: P.Var


class PsKeyboardObserver(P.PropSheet):
    layout: P.Property


class PsKeyboardRow(PsRowLayout):
    key_weight: Union[float, P.Real]
    small_text_visible: Union[bool, P.Bool]


class PsModeKey(PsKey):
    mode: Union[bool, P.Bool]


class PsNumberKey(PsKey):
    pass


class PsSelectionListModel(P.PropSheet):
    pass


class PsShiftHandler(P.PropSheet):
    auto_capitalization_enabled: Union[bool, P.Bool]
    sentence_ending_characters: Union[str, P.String]
    toggle_shift_enabled: Union[bool, P.Bool]


class PsShiftKey(PsBaseKey):
    pass


class PsSpaceKey(PsKey):
    pass


class PsSymbolModeKey(PsKey):
    pass


class PsTrace(P.PropSheet):
    canceled: Union[bool, P.Bool]
    channels: Union[list, P.List]
    final: Union[bool, P.Bool]
    opacity: P.Property
    trace_id: Union[int, P.Int]


class PsTraceInputArea(PsMultiPointTouchArea):
    bounding_box: P.Rect
    canvas_type: Union[str, P.String]
    horizontal_rulers: P.Var
    pattern_recognition_mode: Union[int, P.Int]
    vertical_rulers: P.Var


class PsTraceInputKey(PsItem):
    bounding_box: P.Property
    canvas_type: P.Property
    horizontal_rulers: P.Property
    pattern_recognition_mode: P.Property
    vertical_rulers: P.Property
    weight: Union[float, P.Real]


class PsVirtualKeyboard(P.PropSheet):
    pass


class PsKeyboardStyle(PsQtObject):
    alternate_keys_list_background: P.Property
    alternate_keys_list_bottom_margin: Union[float, P.Real]
    alternate_keys_list_delegate: P.Property
    alternate_keys_list_highlight: P.Property
    alternate_keys_list_item_height: Union[float, P.Real]
    alternate_keys_list_item_width: Union[float, P.Real]
    alternate_keys_list_left_margin: Union[float, P.Real]
    alternate_keys_list_right_margin: Union[float, P.Real]
    alternate_keys_list_top_margin: Union[float, P.Real]
    backspace_key_panel: P.Property
    character_preview_delegate: P.Property
    character_preview_margin: Union[float, P.Real]
    enter_key_panel: P.Property
    full_screen_input_background: P.Property
    full_screen_input_color: Union[str, P.Color]
    full_screen_input_container_background: P.Property
    full_screen_input_cursor: P.Property
    full_screen_input_font: P.Font
    full_screen_input_margins: Union[float, P.Real]
    full_screen_input_padding: Union[float, P.Real]
    full_screen_input_password_character: Union[str, P.String]
    full_screen_input_selected_text_color: Union[str, P.Color]
    full_screen_input_selection_color: Union[str, P.Color]
    handwriting_key_panel: P.Property
    hide_key_panel: P.Property
    key_panel: P.Property
    keyboard_background: P.Property
    keyboard_design_height: Union[float, P.Real]
    keyboard_design_width: Union[float, P.Real]
    keyboard_height: Union[float, P.Real]
    keyboard_relative_bottom_margin: Union[float, P.Real]
    keyboard_relative_left_margin: Union[float, P.Real]
    keyboard_relative_right_margin: Union[float, P.Real]
    keyboard_relative_top_margin: Union[float, P.Real]
    language_key_panel: P.Property
    language_list_add: P.Property
    language_list_background: P.Property
    language_list_delegate: P.Property
    language_list_highlight: P.Property
    language_list_remove: P.Property
    language_popup_list_enabled: Union[bool, P.Bool]
    mode_key_panel: P.Property
    navigation_highlight: P.Property
    popup_list_add: P.Property
    popup_list_background: P.Property
    popup_list_delegate: P.Property
    popup_list_highlight: P.Property
    popup_list_remove: P.Property
    scale_hint: Union[float, P.Real]
    selection_handle: P.Property
    selection_list_add: P.Property
    selection_list_background: P.Property
    selection_list_delegate: P.Property
    selection_list_height: Union[float, P.Real]
    selection_list_highlight: P.Property
    selection_list_remove: P.Property
    shift_key_panel: P.Property
    space_key_panel: P.Property
    symbol_key_panel: P.Property
    trace_canvas_delegate: P.Property
    trace_input_key_panel_delegate: P.Property


class PsKeyIcon(PsItem):
    color: P.Property
    source: P.Property


class PsKeyPanel(PsItem):
    control: P.Property
    sound_effect: Union[str, P.Url]


class PsSelectionListItem(PsItem):
    sound_effect: Union[str, P.Url]


class PsTraceCanvas(PsCanvas):
    auto_destroy: Union[bool, P.Bool]
    auto_destroy_delay: Union[int, P.Int]
    render_function: P.Var
    trace: P.Property


class PsTraceInputKeyPanel(PsItem):
    control: P.Property
    trace_margins: Union[float, P.Real]


class PsVirtualKeyboardSettings(P.PropSheet):
    active_locales: Union[list, P.List]
    available_locales: Union[list, P.List]
    default_dictionary_disabled: Union[bool, P.Bool]
    default_input_method_disabled: Union[bool, P.Bool]
    full_screen_mode: Union[bool, P.Bool]
    handwriting_mode_disabled: Union[bool, P.Bool]
    hwr_timeout_for_alphabetic: Union[bool, P.Bool]
    hwr_timeout_for_cjk: Union[bool, P.Bool]
    input_method_hints: Union[int, P.Int]
    locale: Union[str, P.String]
    style_name: Union[str, P.String]
    user_data_path: Union[bool, P.Bool]
    word_candidate_list: P.WordCandidateList


class PsBinding(P.PropSheet):
    delayed: Union[bool, P.Bool]
    property: Union[str, P.String]
    restore_mode: Union[int, P.Enumeration]
    target: P.Property
    value: P.Property
    when: Union[bool, P.Bool]


class PsConnections(P.PropSheet):
    enabled: Union[bool, P.Bool]
    ignore_unknown_signals: Union[bool, P.Bool]
    target: P.Property


class PsDate(P.PropSheet):
    pass


class PsLocale(P.PropSheet):
    am_text: Union[str, P.String]
    decimal_point: Union[str, P.String]
    exponential: Union[str, P.String]
    first_day_of_week: Union[int, P.Enumeration]
    group_separator: Union[str, P.String]
    measurement_system: Union[int, P.Enumeration]
    name_: Union[str, P.String]
    native_country_name: Union[str, P.String]
    native_language_name: Union[str, P.String]
    negative_sign: Union[str, P.String]
    number_options: Union[int, P.Enumeration]
    percent: Union[str, P.String]
    pm_text: Union[str, P.String]
    positive_sign: Union[str, P.String]
    text_direction: Union[int, P.Enumeration]
    ui_languages: P.Property
    week_days: P.Property
    zero_digit: Union[str, P.String]


class PsLoggingCategory(P.PropSheet):
    default_log_level: Union[int, P.Enumeration]
    name_: Union[str, P.String]


class PsNumber(P.PropSheet):
    pass


class PsQt(P.PropSheet):
    application: P.Property
    input_method: P.Property
    platform: P.Property
    style_hints: P.Property
    ui_language: Union[str, P.String]


class PsString(P.PropSheet):
    pass


class PsTimer(P.PropSheet):
    interval: Union[int, P.Int]
    repeat: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    triggered_on_start: Union[bool, P.Bool]


class PsColorDialog(PsDialog):
    color: Union[str, P.Color]
    current_color: Union[str, P.Color]
    options: P.Property


class PsFileDialog(PsDialog):
    accept_label: Union[str, P.String]
    current_file: Union[str, P.Url]
    current_files: Union[list, P.List]
    default_suffix: Union[str, P.String]
    file: Union[str, P.Url]
    file_mode: Union[int, P.Enumeration]
    files: Union[list, P.List]
    folder: Union[str, P.Url]
    name_filters: Union[list, P.List]
    options: P.Property
    reject_label: Union[str, P.String]
    selected_name_filter: P.SelectedNameFilter


class PsFolderDialog(PsDialog):
    accept_label: Union[str, P.String]
    current_folder: Union[str, P.Url]
    folder: Union[str, P.Url]
    options: P.Property
    reject_label: Union[str, P.String]


class PsFontDialog(PsDialog):
    current_font: P.Font
    font: P.Font
    options: P.Property


class PsMenuItemGroup(PsQtObject):
    checked_item: P.Property
    enabled: Union[bool, P.Bool]
    exclusive: Union[bool, P.Bool]
    items: Union[list, P.List]
    visible: Union[bool, P.Bool]


class PsMessageDialog(PsDialog):
    buttons: P.Property
    detailed_text: Union[str, P.String]
    informative_text: Union[str, P.String]
    text: Union[str, P.String]


class PsStandardPaths(PsQtObject):
    pass


class PsSystemTrayIcon(PsQtObject):
    available: Union[bool, P.Bool]
    geometry: P.Rect
    icon: P.Icon
    menu: P.Property
    supports_messages: Union[bool, P.Bool]
    tooltip: Union[str, P.String]
    visible: Union[bool, P.Bool]


class PsDelegateChoice(P.PropSheet):
    column: Union[int, P.Int]
    delegate: P.Property
    index: Union[int, P.Int]
    role_value: P.Property
    row: Union[int, P.Int]


class PsDelegateChooser(P.PropSheet):
    choices: Union[list, P.List]
    role: Union[str, P.String]


class PsTableModel(P.PropSheet):
    column_count: Union[int, P.Int]
    row_count: Union[int, P.Int]
    rows: P.Property


class PsTableModelColumn(P.PropSheet):
    pass


class PsDelegateModel(P.PropSheet):
    count: Union[int, P.Int]
    delegate: P.Property
    filter_on_group: Union[str, P.String]
    groups: Union[list, P.List]
    items: P.Property
    model: P.Property
    parts: P.Property
    persisted_items: P.Property
    root_index: P.Property


class PsDelegateModelGroup(P.PropSheet):
    count: Union[int, P.Int]
    include_by_default: Union[bool, P.Bool]
    name_: Union[str, P.String]


class PsInstantiator(P.PropSheet):
    active: Union[bool, P.Bool]
    asynchronous: Union[bool, P.Bool]
    count: Union[int, P.Int]
    delegate: P.Property
    model: P.Property
    object: P.Property


class PsItemSelectionModel(P.PropSheet):
    current_index: P.Property
    has_selection: Union[bool, P.Bool]
    model: P.Property
    selected_indexes: P.Property
    selection: P.Property


class PsListElement(P.PropSheet):
    pass


class PsListModel(P.PropSheet):
    count: Union[int, P.Int]
    dynamic_roles: Union[bool, P.Bool]


class PsObjectModel(P.PropSheet):
    count: Union[int, P.Int]


class PsPackage(P.PropSheet):
    pass


class PsEventConnection(P.PropSheet):
    events: P.Property
    state_machine: P.Property


class PsInvokedServices(P.PropSheet):
    children: P.Var
    qml_children: Union[list, P.List]
    state_machine: P.Property


class PsScxmlStateMachine(P.PropSheet):
    data_model: P.Property
    initial_values: P.Var
    initialized: Union[bool, P.Bool]
    invoked: Union[bool, P.Bool]
    invoked_services: Union[list, P.List]
    loader: P.Property
    name_: Union[str, P.String]
    parse_errors: P.Var
    running: Union[bool, P.Bool]
    session_id: Union[str, P.String]


class PsStateMachineLoader(P.PropSheet):
    source: Union[str, P.Url]
    state_machine: P.Property


class PsIdleInhibitManagerV1(P.PropSheet):
    pass


class PsQtTextInputMethodManager(P.PropSheet):
    pass


class PsShellSurface(P.PropSheet):
    window_type: P.Property


class PsShellSurfaceItem(PsWaylandQuickItem):
    auto_create_popup_items: Union[bool, P.Bool]
    move_item: P.Property
    shell_surface: P.Property


class PsWaylandClient(P.PropSheet):
    compositor: P.Property
    group_id: Union[int, P.Int]
    process_id: Union[int, P.Int]
    user_id: Union[int, P.Int]


class PsWaylandCompositor(P.PropSheet):
    additional_shm_formats: Union[list, P.List]
    created: Union[bool, P.Bool]
    default_output: P.Property
    default_seat: P.Property
    extensions: Union[list, P.List]
    retained_selection: Union[bool, P.Bool]
    socket_name: Union[str, P.String]
    use_hardware_integration_extension: Union[bool, P.Bool]


class PsWaylandHardwareLayer(P.PropSheet):
    stacking_level: Union[int, P.Int]


class PsWaylandOutput(P.PropSheet):
    automatic_frame_callback: Union[bool, P.Bool]
    available_geometry: P.Rect
    compositor: P.Property
    geometry: P.Rect
    manufacturer: Union[str, P.String]
    model: Union[str, P.String]
    physical_size: P.Size
    position: P.Point
    scale_factor: Union[int, P.Int]
    size_follows_window: Union[bool, P.Bool]
    subpixel: P.Property
    transform: P.Property
    window: P.Property


class PsWaylandSeat(P.PropSheet):
    pass


class PsWaylandSurface(P.PropSheet):
    buffer_scale: P.Size
    buffer_size: P.Size
    client: P.Property
    content_orientation: P.Property
    cursor_surface: Union[bool, P.Bool]
    destination_size: P.Size
    has_content: Union[bool, P.Bool]
    inhibits_idle: Union[bool, P.Bool]
    origin: P.Property
    source_geometry: P.Rect
    use_texture_alpha: Union[bool, P.Bool]


class PsWaylandView(P.PropSheet):
    allow_discard_front_buffer: Union[bool, P.Bool]
    buffer_locked: Union[bool, P.Bool]
    output: P.Property
    surface: P.Property


class PsKeyframe(PsQtObject):
    easing: P.Var
    frame: Union[float, P.Double]
    value: P.Var


class PsKeyframeGroup(PsQtObject):
    keyframe_source: Union[str, P.Url]
    keyframes: Union[list, P.List]
    property: Union[str, P.String]
    target: P.Var


class PsTimeline(PsQtObject):
    animations: Union[list, P.List]
    current_frame: Union[float, P.Double]
    enabled: Union[bool, P.Bool]
    end_frame: Union[float, P.Double]
    keyframes: Union[list, P.List]
    start_frame: Union[float, P.Double]


class PsTimelineAnimation(PsNumberAnimation):
    ping_pong: Union[bool, P.Bool]


class PsLottieAnimation(PsItem):
    auto_play: Union[bool, P.Bool]
    direction: Union[int, P.Enumeration]
    end_frame: Union[int, P.Int]
    frame_rate: Union[int, P.Int]
    loops: Union[int, P.Int]
    quality: Union[int, P.Enumeration]
    source: Union[str, P.Url]
    start_frame: Union[int, P.Int]
    status: Union[int, P.Enumeration]


class PsSignalSpy(PsItem):
    count: Union[int, P.Int]
    signal_arguments: Union[list, P.List]
    signal_name: Union[str, P.String]
    target: P.Var
    valid: Union[bool, P.Bool]


class PsTestCase(PsItem):
    completed: Union[bool, P.Bool]
    name_: Union[str, P.String]
    optional: Union[bool, P.Bool]
    running: Union[bool, P.Bool]
    when: Union[bool, P.Bool]
    window_shown: Union[bool, P.Bool]


class PsTouchEventSequence(P.PropSheet):
    pass
